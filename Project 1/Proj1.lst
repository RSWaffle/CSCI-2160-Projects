Microsoft (R) Macro Assembler Version 6.11		    09/16/19 17:26:37
proj1.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj1.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160
				;*  Lab:          Proj1
				;*  Date:         9/23/2019
				;*  Purpose:      give a secription here of what the program DOES
				;******************************************************************************************
					.486				;tells assembler to generate 32-bit code
					.model flat			;tells assembler that all addresses are real addresses
					.stack 100h			;EVERY program needs to have a stack allocated
				;******************************************************************************************
				;  List all necessary prototypes for methods to be called here
					
					ExitProcess PROTO Near32 stdcall, dwExitCode:DWORD  ;executes "normal" termination
					
				;******************************************************************************************
 00000000				.DATA						;declare all data identifiers after this directive

 00000000			iResult DWORD  0 dup(?)			;memory to hold the resulting value of calculation
 00000000 007F			sVal1 WORD 127					;sets the variable sVal1 to 127 decimal for calculation
 00000002 FFE7			sVal2 WORD -25					;sets the variable sVal2 to -25 decimal for calculation
 00000004 000131AD		iVal3 DWORD 78253				;sets the variable iVal3 to 78,253 decimal for calculation
 00000008 4E			bVal4 BYTE 78					;sets the variable of BVal to 78, 200 decimal for calculation

 00000009  00000001 [		sTemp WORD 1 dup(?)				;sets aside memory for a future value for calculation
	    0000
	   ]
 0000000B			iTemp DWORD 0 dup(?)			;sets aside memory for a future value for calculation

				;******************************************************************************************
 00000000				.CODE
 00000000			_start:							;entry point for this program (needed for debugger)
 00000000
 00000000  B8 00000000			MOV EAX, 0					;aids in debugging and initalizes the program
					
 00000005  BB 00000000			MOV EBX, 0					;intitialize EBX to 0 to avoid calculation error
 0000000A  66| A1			MOV AX ,sVal1				;move the first value of calculation to AX register
	   00000000 R
 00000010  66| 8B 1D			MOV BX, sVal2				;move the second valur of calculation to the BX register
	   00000002 R
 00000017  66| 03 C3			ADD AX, BX					;add the two regiters and store in AX register	
 0000001A  66| A3			MOV sTemp, AX				;store the value in AX into memory for later calculation
	   00000009 R
					
 00000020  BB 00000000			MOV EBX, 0					;reset the EBX register to 0 to avoid calculation error
 00000025  A1 00000004 R		MOV EAX, iVal3				;move the first value of calculation to the EAX register
 0000002A  8A 1D 00000008 R		MOV BL,  bVal4				;move the second value of calculation to the EBX register makeing sure to match the byte size
 00000030  2B C3			SUB EAX, EBX				;preform the subtract calculation and store into the EAX register
 00000032  A3 0000000B R		MOV iTemp, EAX				;store the result in EAX to memory
					
 00000037  B9 0000000F			MOV ECX, 15					;set the counter to 15 so the loop knows when to terminate
 0000003C  B8 00000000			MOV EAX, 0					;set the EAX register to 0 to avoid any calculation error
 00000041  66| 8B 1D			MOV BX, sTemp				;move the variable sTemp into a register so calculation can be done via register to register
	   00000009 R
					
 00000048			lpMultiply1:					;loop for first multiplication operation
 00000048  66| 03 C3			ADD AX, BX					;add the two values together and store into AX
 0000004B  E2 FB			loop lpMultiply1			;decrement the ECX register to eventually stop the loop, and jump to the top
					
 0000004D  66| 83 E8 14			SUB AX, 20					;subtracts 20 from AX and stores back into AX
 00000051  66| A3			MOV sTemp, AX				;moves the result from the loop (stored in AX register) into the sTemp variable
	   00000009 R
					
 00000057  66| 8B 0D			MOV CX, sTemp	
	   00000009 R
 0000005E  B8 00000000			MOV EAX, 0
 00000063  8B 1D 0000000B R		MOV EBX, iTemp
					
 00000069			lpMultiply2:
 00000069  03 C3			ADD EAX, EBX
 0000006B  E2 FC			loop lpMultiply2
					
 0000006D  A3 00000000 R		MOV iResult, EAX

					
				;************************************* the instruction below calls for "normal termination"	
					INVOKE ExitProcess,0
 00000079				PUBLIC _start
					END							;signals assembler that there are no instructions after this stmt
Microsoft (R) Macro Assembler Version 6.11		    09/16/19 17:26:37
proj1.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000000B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000079 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000079 Private
  lpMultiply1  . . . . . . . . .	L Near	 00000048 _TEXT	
  lpMultiply2  . . . . . . . . .	L Near	 00000069 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
bVal4  . . . . . . . . . . . . .	Byte	 00000008 _DATA	
iResult  . . . . . . . . . . . .	DWord	 00000000 _DATA	
iTemp  . . . . . . . . . . . . .	DWord	 0000000B _DATA	
iVal3  . . . . . . . . . . . . .	DWord	 00000004 _DATA	
lpMultiply1  . . . . . . . . . .	L Near	 00000048 _TEXT	
lpMultiply2  . . . . . . . . . .	L Near	 00000069 _TEXT	
sTemp  . . . . . . . . . . . . .	Word	 00000009 _DATA	
sVal1  . . . . . . . . . . . . .	Word	 00000000 _DATA	
sVal2  . . . . . . . . . . . . .	Word	 00000002 _DATA	

	   0 Warnings
	   0 Errors
