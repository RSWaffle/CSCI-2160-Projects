Microsoft (R) Macro Assembler Version 6.11		    09/28/19 19:15:31
proj2.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj2.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:          Proj1
				;*  Date:         10/04/2019
				;*  Purpose:      This program accepts an amount of numbers specified by the user, then calculates the sum, calculates
				;*				  The average, calculates the modulo remainder, maximum and minimum value, 
				;*                and displays the numbers in reverse order via a stack.
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
				;  List all necessary prototypes for methods to be called here
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  					;executes "normal" termination
					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword			;will convert any D-Word number into ACSII characters
					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  				;will display ;characters until the NULL character is found
					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword ;get input from user and convert. 
					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  
					
				;******************************************************************************************
 00000000				.DATA						;declare all data identifiers after this directive
					
 00000000 0A 0A 48 6F 77		strEnterAmtNumbers byte 10,10, "How many values to input: ", 0
	   20 6D 61 6E 79
	   20 76 61 6C 75
	   65 73 20 74 6F
	   20 69 6E 70 75
	   74 3A 20 00
 0000001D 4D 61 78 69 6D		strMaxAmount byte "Maximum amount is 10 numbers.", 0
	   75 6D 20 61 6D
	   6F 75 6E 74 20
	   69 73 20 31 30
	   20 6E 75 6D 62
	   65 72 73 2E 00
 0000003B 0A 0D 09 4E 61		strProjInfo byte  10,13,9,
	   6D 65 3A 20 52
	   79 61 6E 20 53
	   68 75 70 65 0A
	   20 20 20 20 20
	   20 20 43 6C 61
	   73 73 3A 20 43
	   53 43 49 20 32
	   31 36 30 2D 30
	   30 31 0A 20 20
	   20 20 20 20 20
	   20 44 61 74 65
	   3A 20 31 30 2F
	   30 34 2F 32 30
	   31 39 0A 20 20
	   20 20 20 20 20
	   20 20 4C 61 62
	   3A 20 50 72 6F
	   6A 65 63 74 20
	   32 00
				        "Name: Ryan Shupe",10,
				"       Class: CSCI 2160-001",10,
				"        Date: 10/04/2019",10,
				"         Lab: Project 2",0
 0000009C 0A 0D 00		    crlf byte  10,13,0				;null-terminated string to skip to new line
 0000009F  0000001E [			strInput byte 30 dup (?)		;set aside 30 bytes of memory for strInput
	    00
	   ]
 000000BD 0002				sNumNumbers word 2				;Maximum number of chars that can be typed in the console. 
					
 000000BF 00000000			iNumOfNums dword ?				;number of numbers to be input/calculated
 000000C3  0000000A [			iNumbers dword 10 dup (?)		;set aside 10 dwords in memory to hold future numbers. 
	    00000000
	   ]
					
					
				;******************************************************************************************
 00000000				.CODE
					
 00000000			_start:
 00000000  B8 00000000			MOV EAX, 0									;statement to help in debugging
					
 00000005 00000005		main PROC

 00000005			getNumofNums:
					INVOKE putstring, ADDR strProjInfo     		;skip to new line, tab, and display Project information "Name: Ryan Shupe" etc. 
					INVOKE putstring, ADDR crlf					;display the characters to skip to a new line
					INVOKE putstring, ADDR strEnterAmtNumbers   ;display the "Enter amount of numbers" message
					INVOKE getstring, ADDR strInput, sNumNumbers;Take the string input and store it into a variable, max amount of chars typed is sNumChars
					INVOKE ascint32, ADDR strInput				;Convert the ASCII value to its true decimal number
 00000040  A3 000000BF R		MOV iNumOfNums, EAX							;Move the result of above method stored in EAX into variable so it isnt lost.
					
 00000045  83 3D 000000BF R		CMP iNumOfNums, 0							;Compare iNumOfNums to 0 to see if the user typed null character
	   00
 0000004C  74 14			JE maxAmountMessage							;If it is null then jump to maxAmountMessage
 0000004E  83 3D 000000BF R		CMP iNumOfNums, 10							;Compare iNumOfNums to 10 to see if the user typed a number greater than 10.
	   0A
 00000055  7F 0B			JG maxAmountMessage							;If greater than, jump to maxAmountMessage
 00000057  83 3D 000000BF R		CMP iNumOfNums, 10
	   0A
 0000005E  7E 00			JLE testing

 00000060			testing:
 00000060  EB 1D			jmp finished
					
 00000062			maxAmountMessage:
 00000062  B9 00000064			MOV ECX, 100								;set ECX to 100 to let the loop know when to terminate and how many lines to skip
 00000067				lpClearSc:									;loop to simulate a clear screen
						INVOKE putstring, ADDR crlf				;display the characters to skip to a new line
 00000071  E2 F4				loop lpClearSc							;decrement ECX so the loop knows when to terminate
					INVOKE putstring, ADDR strMaxAmount			;display a message letting the user know that the maximum amount of numbers to enter is 10
 0000007D  EB 86			JMP getNumofNums							;jump back up to the getNumofNums section and it will repeat until the user enters a value less than or equal to 10
					
					
				;************************************* the instruction below calls for "normal termination"	
 0000007F			finished:
					INVOKE ExitProcess,0						 
					PUBLIC _start
					
 00000086			main ENDP
					END											;signals assembler that there are no instructions after this statement
					
Microsoft (R) Macro Assembler Version 6.11		    09/28/19 19:15:31
proj2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000EB DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000086 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 00000081 Public
  getNumofNums . . . . . . . . .	L Near	 00000005 _TEXT	
  testing  . . . . . . . . . . .	L Near	 00000060 _TEXT	
  maxAmountMessage . . . . . . .	L Near	 00000062 _TEXT	
  lpClearSc  . . . . . . . . . .	L Near	 00000067 _TEXT	
  finished . . . . . . . . . . .	L Near	 0000007F _TEXT	
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
crlf . . . . . . . . . . . . . .	Byte	 0000009C _DATA	
iNumOfNums . . . . . . . . . . .	DWord	 000000BF _DATA	
iNumbers . . . . . . . . . . . .	DWord	 000000C3 _DATA	
sNumNumbers  . . . . . . . . . .	Word	 000000BD _DATA	
strEnterAmtNumbers . . . . . . .	Byte	 00000000 _DATA	
strInput . . . . . . . . . . . .	Byte	 0000009F _DATA	
strMaxAmount . . . . . . . . . .	Byte	 0000001D _DATA	
strProjInfo  . . . . . . . . . .	Byte	 0000003B _DATA	

	   0 Warnings
	   0 Errors
