Microsoft (R) Macro Assembler Version 6.11		    09/30/19 21:22:47
proj2.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj2.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:          Proj1
				;*  Date:         10/04/2019
				;*  Purpose:      This program accepts an amount of numbers specified by the user, then calculates the sum, calculates
				;*				  The average, calculates the modulo remainder, maximum and minimum value, 
				;*                and displays the numbers in reverse order via a stack.
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
				;  List all necessary prototypes for methods to be called here
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  					;Executes "normal" termination
					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword			;Will convert any D-Word number into ACSII characters
					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  				;Will display ;characters until the NULL character is found
					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword ;Get input from user and convert. 
					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  				;This converts ASCII characters to the dword value
					
				;******************************************************************************************
 00000000				.DATA							;declare all data identifiers after this directive
 00000000 3A 5E 29 00			strTest byte ":^)", 0
 00000004 0A 0A 48 6F 77		strEnterAmtNumbers byte 10,10, "How many values to input: ", 0
	   20 6D 61 6E 79
	   20 76 61 6C 75
	   65 73 20 74 6F
	   20 69 6E 70 75
	   74 3A 20 00
 00000021 0A 0A 4C 69 73		strReverse byte 10,10, "List of numbers in reverse order: ", 0
	   74 20 6F 66 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 72 65 76 65
	   72 73 65 20 6F
	   72 64 65 72 3A
	   20 00
 00000046 0A 0A 54 79 70		strEnterNumbers byte 10,10, "Type each value and press ENTER after each one: ", 0
	   65 20 65 61 63
	   68 20 76 61 6C
	   75 65 20 61 6E
	   64 20 70 72 65
	   73 73 20 45 4E
	   54 45 52 20 61
	   66 74 65 72 20
	   65 61 63 68 20
	   6F 6E 65 3A 20
	   00
 00000079 4D 61 78 69 6D		strMaxAmount byte "Maximum amount is 10 numbers.", 0
	   75 6D 20 61 6D
	   6F 75 6E 74 20
	   69 73 20 31 30
	   20 6E 75 6D 62
	   65 72 73 2E 00
 00000097 54 68 65 20 4A		strMod byte "The Java modulo is: ", 0
	   61 76 61 20 6D
	   6F 64 75 6C 6F
	   20 69 73 3A 20
	   00
 000000AC 54 68 65 20 73		strLess byte "The smallest number is: ", 0
	   6D 61 6C 6C 65
	   73 74 20 6E 75
	   6D 62 65 72 20
	   69 73 3A 20 00
 000000C5 54 68 65 20 67		strGtr byte "The greatest number is: ", 0
	   72 65 61 74 65
	   73 74 20 6E 75
	   6D 62 65 72 20
	   69 73 3A 20 00
 000000DE 54 68 65 20 4A		strAverage byte "The Java answer to the whole number average is: ", 0
	   61 76 61 20 61
	   6E 73 77 65 72
	   20 74 6F 20 74
	   68 65 20 77 68
	   6F 6C 65 20 6E
	   75 6D 62 65 72
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 00
 0000010F 4D 61 78 69 6D		strMaxNumber byte "Maximum number you can enter is 4,294,967,295.", 0
	   75 6D 20 6E 75
	   6D 62 65 72 20
	   79 6F 75 20 63
	   61 6E 20 65 6E
	   74 65 72 20 69
	   73 20 34 2C 32
	   39 34 2C 39 36
	   37 2C 32 39 35
	   2E 00
 0000013E 54 68 65 20 73		strSum byte "The sum of all the numbers is: ", 0
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 0000015E 0A 0D 09 4E 61		strProjInfo byte  10,13,9,
	   6D 65 3A 20 52
	   79 61 6E 20 53
	   68 75 70 65 0A
	   20 20 20 20 20
	   20 20 43 6C 61
	   73 73 3A 20 43
	   53 43 49 20 32
	   31 36 30 2D 30
	   30 31 0A 20 20
	   20 20 20 20 20
	   20 44 61 74 65
	   3A 20 31 30 2F
	   30 34 2F 32 30
	   31 39 0A 20 20
	   20 20 20 20 20
	   20 20 4C 61 62
	   3A 20 50 72 6F
	   6A 65 63 74 20
	   32 00
				        "Name: Ryan Shupe",10,
				"       Class: CSCI 2160-001",10,
				"        Date: 10/04/2019",10,
				"         Lab: Project 2",0
 000001BF  0000000A [			strCalcResult byte 10 dup (?)
	    00
	   ]
 000001C9 0A 0D 00		    crlf byte  10,13,0				;Null-terminated string to skip to new line
 000001CC  0000003C [			strInput byte 60 dup (?)		;Set aside 60 bytes of memory for strInput
	    00
	   ]
 00000208 0002				sNumNumbers word 2				;Maximum number of chars that can be typed in the console for specifying how many numbers. 
 0000020A 000A				sNum word 10					;Maximum number of chars that can be typed in the console for entering a number.
 0000020C 00				bNumOfNums byte ?				;Number of numbers to be input/calculated
 0000020D  0000000A [			iNumbers dword 10 dup (?)		;Set aside 10 dwords in memory to hold future numbers.
	    00000000
	   ]
 00000235 FFFFFFFF			iMaxNumber dword 4294967295		;Maximum number for a dword for reference later
 00000239 00000000			iTempNum dword ?				;Temporary variable to be used for comparing later
 0000023D 00000000			iTemp dword ?
 00000241 00000000			iResult dword ?					;Temporary variable to store results before displaying
 00000245 00				bNumRemainder byte ?
					
					
				;******************************************************************************************
 00000000				.CODE
					
 00000000			_start:
 00000000  B8 00000000			MOV EAX, 0										;Statement to help in debugging
					
 00000005 00000005		main PROC
					
 00000005			getNumofNums:
					INVOKE putstring, ADDR strProjInfo     			;Skip to new line, tab, and display Project information "Name: Ryan Shupe" etc. 
					INVOKE putstring, ADDR crlf						;Display the characters to skip to a new line
					INVOKE putstring, ADDR strEnterAmtNumbers  	    ;Display the "Enter amount of numbers" message
					INVOKE getstring, ADDR strInput, sNumNumbers	;Take the string input and store it into a variable, max amount of chars typed is sNumChars
					INVOKE ascint32, ADDR strInput					;Convert the ASCII value to its true decimal number
 00000040  A2 0000020C R		MOV bNumOfNums, AL								;Move the result of above method stored in EAX into variable so it isnt lost.
 00000045  0F B6 0D			MOVZX ECX, bNumOfNums								;Put the value of bNumOfNums into ECX so we can use it to loop later
	   0000020C R
 0000004C  BF 00000000			MOV EDI, 0										;Put 0 into EDI so we can start at a 0 offset into iNumbers
						
 00000051  80 3D 0000020C R		CMP bNumOfNums, 0								;Compare bNumOfNums to 0 to see if the user typed null character
	   00
 00000058  0F 84 00000099		JE maxAmountMessage								;If it is null then jump to maxAmountMessage
 0000005E  80 3D 0000020C R		CMP bNumOfNums, 10								;Compare bNumOfNums to 10 to see if the user typed a number greater than 10.
	   0A
 00000065  0F 8F 0000008C		JG maxAmountMessage								;If greater than, jump to maxAmountMessage
 0000006B  80 3D 0000020C R		CMP bNumOfNums, 10								;Compare bNumOfNums to 10 to see if it is less than or equal to 10	
	   0A
 00000072  7E 00			JLE getNums										;If so, jump to getNums so we can get the numbers for calculation 

 00000074			getNums:
					INVOKE putstring, ADDR strEnterNumbers   		;Display the "Type each value and press ENTER after each one:" message
 0000007E				lpGetNums:
 0000007E  B8 00000000				MOV EAX, 0									;Reset EAX to 0 to prevent errors
						INVOKE putstring, ADDR crlf					;Display the characters to skip to a new line
				 
						INVOKE getstring, ADDR strInput, sNum		;Take the string input and store it into a variable, max amount of chars typed is sNumChars
						INVOKE ascint32, ADDR strInput				;Convert the ASCII value to its true decimal number
 000000AA  A3 00000239 R			MOV iTempNum, EAX							;Move the EAX value into a variable so it isnt lost. 
 000000AF  8B 15 00000235 R			MOV EDX, iMaxNumber							;Moves into EBX the max dword value to compare 
					
 000000B5  83 3D 00000239 R			CMP iTempNum, 0								;Compare EAX to 0 to see if the user typed null character
	   00
 000000BC  74 10				JE invalidNum							    ;If it is null then jump to maxAmountMessage
 000000BE  3B 15 00000239 R			CMP EDX, iTempNum							;Compare EDX to maximum dWord value
 000000C4  7F 08				JG invalidNum								;If it is greater than, jump to invalidNum section
 000000C6  3B 15 00000239 R			CMP EDX, iTempNum							;Compare EDX to maximum dWord value
 000000CC  7E 16				JLE validNum								;If the number complies, jump to the validNum section

 000000CE					invalidNum:
							INVOKE putstring, ADDR crlf				;Display the characters to skip to a new line
							INVOKE putstring, ADDR strMaxNumber		;Display the max possible dword value string
 000000E2  EB 90					JMP getNums								;Jump to the top and repeat until complied
					
 000000E4					validNum:
 000000E4  89 87 0000020D R				MOV iNumbers[EDI], EAX					;Move EBX into iNumbers to be saved for later
 000000EA  83 C7 04					ADD EDI, 4								;Add 4 to EDI to put the number into the correct place in iNumbers
 000000ED  89 3D 0000023D R				MOV iTemp, EDI							;Moves the end position into iTemp of iNumbers[] array
							
 000000F3  E2 89			loop lpgetNums									;Keep looping this until all of the numbers to be entered are filled.
					
 000000F5  EB 20		JMP calculation										;Jump to the calculation section to preform the required calculation
					
 000000F7			maxAmountMessage:
 000000F7  B9 00000064			MOV ECX, 100									;Set ECX to 100 to let the loop know when to terminate and how many lines to skip
 000000FC				lpClearSc:										;Loop to simulate a clear screen
						INVOKE putstring, ADDR crlf					;Display the characters to skip to a new line
 00000106  E2 F4				loop lpClearSc								;Decrement ECX so the loop knows when to terminate
					INVOKE putstring, ADDR strMaxAmount				;Display a message letting the user know that the maximum amount of numbers to enter is 10
 00000112  E9 FFFFFEEE			JMP getNumofNums								;Jump back up to the getNumofNums section and it will repeat until the user enters a value less than or equal to 10
					
 00000117			calculation:
 00000117  BA 00000000			MOV EDX, 0										;Move 0 into EAX to prevent calculation errors
 0000011C  83 EF 04			SUB EDI, 4										;Subtract 4 from EDI so it doesnt point to the end of the iNumbers array
 0000011F  0F B6 0D			MOVZX ECX, bNumOfNums							;Put the amount of numbers in ECX so the loop runs that amount of times.
	   0000020C R
 00000126				lpSum:
 00000126  8B 87 0000020D R			MOV EAX, iNumbers[EDI]						;Moves the value offset EDI in iNumbers into EAX
 0000012C  03 D0				ADD EDX, EAX								;Add the two registers to eventually get the sum in EAX
 0000012E  83 EF 04				SUB EDI, 4									;Subtract 4 from EDI so we get the next number in the array
 00000131  E2 F3			loop lpSum										;Decrement ECX to eventually terminate the loop
					
 00000133  89 15 00000241 R		MOV iResult, EDX								;Moves the result into a variable so it can be set up for display
					INVOKE putstring, ADDR crlf						;Skips to a new line
					INVOKE putstring, ADDR strSum					;display the string "The sum of the values is:"
					INVOKE intasc32, ADDR strCalcResult, iResult    ;convert the D-WORD IResult to ASCII characters
					INVOKE putstring, ADDR strCalcResult            ;display the numeric string
					
 00000167  A1 00000241 R		MOV EAX, iResult								;Moves the current sum of all the numbers into EAX for subtraction
 0000016C  0F B6 15			MOVZX EDX, bNumOfNums							;moves the value of bNumOfNums into EDX for calculation
	   0000020C R
 00000173  BB 00000001			MOV EBX, 1										;set EBX to 1 because it has to go through atleast once

 00000178			wlpDivide:
 00000178  2B C2				SUB EAX, EDX								;Subtract the two registers to sumulate division
 0000017A  3B C2				CMP EAX, EDX								;Compare the numbers to see if the number is too small to keep subtracting
 0000017C  7C 07				JL resultNums								;If the number is less than, jump to resultNums
 0000017E  3B C2				CMP EAX, EDX								;Compare the numbers to see if the number is too small to keep subtracting
 00000180  7D 00				JGE nextNum									;If it is greater than or equal to, jump to the next num section
						
 00000182			nextNum:
 00000182  43					INC EBX										;Increments the number to eventually get our average
 00000183  EB F3				JMP wlpDivide								;jump back up to the while loop
							
 00000185			resultNums:					
 00000185  A2 00000245 R			MOV BnumRemainder, AL						;moves the value in AL into the bnumremainder variable, this is our remainder. 
 0000018A  89 1D 00000241 R			MOV iResult, EBX							;moves the value of EBX into iResult, this is the average number.
						
					INVOKE putstring, ADDR crlf						 	 			;Skips to a new line
					INVOKE putstring, ADDR strAverage					 			;display the string "The average of the values is:"
					INVOKE intasc32, ADDR strCalcResult, iResult    	 			;convert the D-WORD IResult to ASCII characters
					INVOKE putstring, ADDR strCalcResult            	 			;display the numeric string
					INVOKE putstring, ADDR crlf							 			;Skips to a new line
					INVOKE putstring, ADDR strMod						 			;display the string "The remainder:"
					INVOKE intasc32, ADDR strCalcResult, dWord ptr BnumRemainder    ;convert the D-WORD IResult to ASCII characters
					INVOKE putstring, ADDR strCalcResult            	 			;display the numeric string
					
 000001EC			compare:	
					
 000001EC  8B 3D 0000023D R		MOV EDI, iTemp													;moves the last position in iNumbers to EDI so we can look through the array
 000001F2  83 EF 04			SUB EDI, 4														;Subtract 4 from EDI so it doesnt point to the end of the iNumbers array
 000001F5  0F B6 0D			MOVZX ECX, bNumOfNums											;Put the amount of numbers in ECX so the loop runs that amount of times.
	   0000020C R
					
 000001FC				lpGetLess:
 000001FC  8B 87 0000020D R			MOV EAX, iNumbers[EDI]										;Moves the value of iNumbers{EDI} into the EAX register for comparing
 00000202  3B D8				CMP EBX, EAX												;Compare the two registers
 00000204  7D 04				JGE gtrThanLss												;If it is greater than or equal to, jump to gtrThanLss section
						
 00000206  3B D8				CMP EBX, EAX												;Compare the two registers
 00000208  7C 07				JL lessThanLss												;If it is less than, jump to lessThanLss section
					
 0000020A				gtrThanLss:	
 0000020A  8B D8				MOV EBX, EAX												;Move the value of EAX into EBX to store the number
 0000020C  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI, so we can compare the next number
 0000020F  EB 05				JMP loopFinishLss											;Jump to the end of the loop
						
 00000211				lessThanLss:
 00000211  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI, so we can compare the next number
 00000214  EB 00				JMP loopFinishLss											;Jump to the end of the loop
						
 00000216				loopFinishLss:
 00000216  E2 E4				loop lpGetLess												;Decrement ECX, and go to the top of the loop
						
 00000218  8B 3D 0000023D R		MOV EDI, iTemp													;moves the last position in iNumbers to EDI so we can look through the array
 0000021E  83 EF 04			SUB EDI, 4														;Subtract 4 from EDI so it doesnt point to the end of the iNumbers array
 00000221  0F B6 0D			MOVZX ECX, bNumOfNums											;Put the amount of numbers in ECX so the loop runs that amount of times.
	   0000020C R
 00000228  BA 00000000			MOV EDX, 0														;Set EDX to 0 so there is no error in calculation
					
 0000022D				lpGetGtr:
 0000022D  8B 87 0000020D R			MOV EAX, iNumbers[EDI]										;Moves the value of iNumbers{EDI} into the EAX register for comparing
 00000233  3B D0				CMP EDX, EAX												;Compare the two registers
 00000235  7D 04				JGE gtrThanGtr												;If it is greater than or equal to, jump to gtrThanGtr section
						
 00000237  3B D0				CMP EDX, EAX												;Compare the two registers
 00000239  7C 05				JL lessThanGtr												;If it is greater than or equal to, jump to lessThanGtr section
					
 0000023B				gtrThanGtr:	
 0000023B  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI, so we can compare the next number
 0000023E  EB 07				JMP loopFinishGtr											;Jump to the end of the loop
						
 00000240				lessThanGtr:
 00000240  8B D0				MOV EDX, EAX												;Move the value of EAX into EDX to store the number
 00000242  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI, so we can compare the next number
 00000245  EB 00				JMP loopFinishGtr											;Jump to the end of the loop
						
 00000247				loopFinishGtr:	
 00000247  E2 E4				loop lpGetGtr												;Decrement ECX, and go to the top of the loop
						
					
 00000249  89 1D 00000241 R		MOV iResult, EBX												;Move into iResult the value of EBX for display
					INVOKE putstring, ADDR crlf						 	 			;Skips to a new line
					INVOKE putstring, ADDR strLess					 				;display the string "The smallest value is:"
					INVOKE intasc32, ADDR strCalcResult, iResult    	 			;convert the D-WORD IResult to ASCII characters
					INVOKE putstring, ADDR strCalcResult            	 			;display the numeric string
					
 0000027D  89 15 00000241 R		MOV iResult, EDX												;Move into iResult the value of EDX for display
					INVOKE putstring, ADDR crlf						 	 			;Skips to a new line
					INVOKE putstring, ADDR strGtr					 				;display the string "The greatest value is:"
					INVOKE intasc32, ADDR strCalcResult, iResult    	 			;convert the D-WORD IResult to ASCII characters
					INVOKE putstring, ADDR strCalcResult            	 			;display the numeric string
					
 000002B1  EB 00			JMP reverse														;Jump to the reverse section of our code. 
					
					
					
 000002B3			reverse:
 000002B3  83 2D 0000023D R		SUB iTemp, 4													;Subtract 4 from iTemp so we dont start outside the iNumbers zone. 
	   04
 000002BA  8B 3D 0000023D R		MOV EDI, iTemp													;Move into EDI the value of iTemp which should be the amount of numbers * 4 - 4.
					
 000002C0  55				PUSH EBP														;Preserve our current base pointer
 000002C1  8B EC			MOV EBP, ESP													;Move our stack pointer into the base pointer
 000002C3  0F B6 0D			MOVZX ECX, bNumOfNums											;Move the number of numbers into ECX so the loop knows when to terminate
	   0000020C R
 000002CA				lpLoadStack:
 000002CA  FF B7 0000020D R			PUSH iNumbers[EDI]											;Push onto the stack the value iNumbers offset EDI
 000002D0  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI so we get the next number in iNumbers
 000002D3  E2 F5			loop lpLoadStack		
					
 000002D5  0F B6 0D			MOVZX ECX, bNumOfNums											;Move the number of numbers into ECX so the loop knows when to terminate
	   0000020C R
 000002DC  BF 00000000			MOV EDI, 0														;Move 0 into EDI so we have a starting point
 000002E1				lpUnloadStack:			
 000002E1  8F 87 0000020D R			POP iNumbers[EDI]											;Pop out of the stack into iNumbers offset EDI (should be in reverse)	
 000002E7  83 C7 04				ADD EDI, 4													;Add 4 to EDI to get the next number in INumbers.
 000002EA  E2 F5			loop lpUnloadStack
					
 000002EC  5D				POP EBP															;Pop EBP out of the stack so we are  fully cleared
 000002ED  03 25 0000023D R		ADD ESP, iTemp												    ;Add to ESP iTemp so we get the bytes we used back

 000002F3  8B 3D 0000023D R		MOV EDI, iTemp													;Move into EDi ITemp, which should be the amount of numbers * 4 - 4.
 000002F9  0F B6 0D			MOVZX ECX, bNumOfNums										    ;Move the amount of numbers into ECX so the loop knows when to terminate
	   0000020C R
					INVOKE putstring, ADDR strReverse					 			;display the string "The greatest value is:"
 0000030A				lpDisplayNumbers:
 0000030A  8B 87 0000020D R			MOV EAX, iNumbers[EDI]										;Move the value at iNumbers[EDI] into EAX to be put in another variable, cant do mem to mem 
 00000310  A3 00000241 R			MOV iResult, EAX											;Move into iResult the value of EAX for displaying
 00000315  83 EF 04				SUB EDI, 4													;Subtract 4 from EDI so we get the next number in iNumbers
						INVOKE putstring, ADDR crlf						 	 		;Skips to a new line
						INVOKE intasc32, ADDR strCalcResult, iResult    	 		;convert the D-WORD IResult to ASCII characters
						INVOKE putstring, ADDR strCalcResult            	 		;display the numeric string
 0000033C  E2 CC			loop lpDisplayNumbers
					
					
					INVOKE putstring, ADDR crlf						 	 			;Skips to a new line
					INVOKE putstring, ADDR strTest					 				;test string"
					
					

					
				;************************************* the instructions below calls for "normal termination"	
 00000352			finished:
					INVOKE ExitProcess,0						 
					PUBLIC _start
					
 00000359			main ENDP
					END												;Signals assembler that there are no instructions after this statement
					
Microsoft (R) Macro Assembler Version 6.11		    09/30/19 21:22:47
proj2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000246 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000359 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 00000354 Public
  getNumofNums . . . . . . . . .	L Near	 00000005 _TEXT	
  getNums  . . . . . . . . . . .	L Near	 00000074 _TEXT	
  lpGetNums  . . . . . . . . . .	L Near	 0000007E _TEXT	
  invalidNum . . . . . . . . . .	L Near	 000000CE _TEXT	
  validNum . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  maxAmountMessage . . . . . . .	L Near	 000000F7 _TEXT	
  lpClearSc  . . . . . . . . . .	L Near	 000000FC _TEXT	
  calculation  . . . . . . . . .	L Near	 00000117 _TEXT	
  lpSum  . . . . . . . . . . . .	L Near	 00000126 _TEXT	
  wlpDivide  . . . . . . . . . .	L Near	 00000178 _TEXT	
  nextNum  . . . . . . . . . . .	L Near	 00000182 _TEXT	
  resultNums . . . . . . . . . .	L Near	 00000185 _TEXT	
  compare  . . . . . . . . . . .	L Near	 000001EC _TEXT	
  lpGetLess  . . . . . . . . . .	L Near	 000001FC _TEXT	
  gtrThanLss . . . . . . . . . .	L Near	 0000020A _TEXT	
  lessThanLss  . . . . . . . . .	L Near	 00000211 _TEXT	
  loopFinishLss  . . . . . . . .	L Near	 00000216 _TEXT	
  lpGetGtr . . . . . . . . . . .	L Near	 0000022D _TEXT	
  gtrThanGtr . . . . . . . . . .	L Near	 0000023B _TEXT	
  lessThanGtr  . . . . . . . . .	L Near	 00000240 _TEXT	
  loopFinishGtr  . . . . . . . .	L Near	 00000247 _TEXT	
  reverse  . . . . . . . . . . .	L Near	 000002B3 _TEXT	
  lpLoadStack  . . . . . . . . .	L Near	 000002CA _TEXT	
  lpUnloadStack  . . . . . . . .	L Near	 000002E1 _TEXT	
  lpDisplayNumbers . . . . . . .	L Near	 0000030A _TEXT	
  finished . . . . . . . . . . .	L Near	 00000352 _TEXT	
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
bNumOfNums . . . . . . . . . . .	Byte	 0000020C _DATA	
bNumRemainder  . . . . . . . . .	Byte	 00000245 _DATA	
crlf . . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
iMaxNumber . . . . . . . . . . .	DWord	 00000235 _DATA	
iNumbers . . . . . . . . . . . .	DWord	 0000020D _DATA	
iResult  . . . . . . . . . . . .	DWord	 00000241 _DATA	
iTempNum . . . . . . . . . . . .	DWord	 00000239 _DATA	
iTemp  . . . . . . . . . . . . .	DWord	 0000023D _DATA	
sNumNumbers  . . . . . . . . . .	Word	 00000208 _DATA	
sNum . . . . . . . . . . . . . .	Word	 0000020A _DATA	
strAverage . . . . . . . . . . .	Byte	 000000DE _DATA	
strCalcResult  . . . . . . . . .	Byte	 000001BF _DATA	
strEnterAmtNumbers . . . . . . .	Byte	 00000004 _DATA	
strEnterNumbers  . . . . . . . .	Byte	 00000046 _DATA	
strGtr . . . . . . . . . . . . .	Byte	 000000C5 _DATA	
strInput . . . . . . . . . . . .	Byte	 000001CC _DATA	
strLess  . . . . . . . . . . . .	Byte	 000000AC _DATA	
strMaxAmount . . . . . . . . . .	Byte	 00000079 _DATA	
strMaxNumber . . . . . . . . . .	Byte	 0000010F _DATA	
strMod . . . . . . . . . . . . .	Byte	 00000097 _DATA	
strProjInfo  . . . . . . . . . .	Byte	 0000015E _DATA	
strReverse . . . . . . . . . . .	Byte	 00000021 _DATA	
strSum . . . . . . . . . . . . .	Byte	 0000013E _DATA	
strTest  . . . . . . . . . . . .	Byte	 00000000 _DATA	

	   0 Warnings
	   0 Errors
