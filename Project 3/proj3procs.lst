Microsoft (R) Macro Assembler Version 6.11		    10/13/19 00:20:17
proj3procs.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj3procs.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:          Proj3
				;*  Date:         10/19/2019
				;*  Purpose:      
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
				heapAllocHarrison PROTO Near32 stdcall, dSize:DWORD 							;Creates memory on the heap (of dSize words) and returns the address of the 
				;******************************************************************************************
 00000000			.data
					
 00000000 00000000			strSize dword ?						;Temp memory to hold the size of words we need to allocate
 00000004 00000000			iLength dword ?						;memory to hold the length of a rectangle
 00000008 00000000			iWidth dword ?						;memory to hold the width of a rectangle
 0000000C 00000000			iHeight dword ?						;memory to hold the height of a triangle
 00000010 00000000			iTemp dword ? 						;temp memory to use during calculation
 00000014 00000000			strStartAddr dword ?				;dword to hold the 4 byte address of the beginning of heap memory
					
				;******************************************************************************************
 00000000			.code

				COMMENT %
				******************************************************************************
				*Name: createRectangle                                                       *
				*Purpose:                                                                    *
				*	     this procedure intakes a width and a height and generates a rectangle*
				*        returning the address of where it is located on the heap.           *
				*Date Created: 10/12/2019                                                    *
				*Date Modified: 10/12/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param iLength:dword                                                        *
				*@param iWidth:dword													 	 *
				*****************************************************************************%
 00000000			createRectangle  PROC Near32
 00000000  55				PUSH EBP							;preserves base register
 00000001  8B EC			MOV EBP, ESP						;sets a new stack frame
 00000003  8B 45 08			MOV EAX, [EBP + 8]					;moves the variable passed in into eax
 00000006  A3 00000004 R		MOV iLength, EAX					;moves the variable into iLength
 0000000B  8B 5D 0C			MOV EBX, [EBP + 12]					;moves the variable passed in into ebx
 0000000E  89 1D 00000008 R		MOV iWidth, EBX						;moves the variable into iWidth
 00000014  F7 E3			MUL EBX								;Multiplies both registers and stores value into eax
 00000016  A3 00000000 R		MOV strSize, EAX					;moves the value into eax into strSize, this should be enough memory to hold what we need.

					INVOKE heapAllocHarrison, strSize	;calls the allocation method to allocate strSize words in memory that we can use to hold our string
 00000026  A3 00000014 R		MOV strStartAddr, EAX				;moves the address of the first byte in our allocated memory into a variable
					
 0000002B  BF 00000000			MOV EDI, 0							;sets our initial offset to 0, we will inc this when we go through the loops
 00000030  C7 87 00000014 R		MOV [strStartAddr + EDI], 10		;this should set the first byte to the new line character.
	   0000000A
 0000003A  47				INC EDI								;increment to the next position
 0000003B  8B 0D 00000004 R		MOV ECX, iLength					;moves into ecx the length of the rectangle so we get the proper dims and the loop knows when to terminate
					
 00000041				lpCreateRectangle:
 00000041  C7 87 00000014 R			MOV [strStartAddr + EDI], 09	;put the character tab at the addr offset edi
	   00000009
 0000004B  47					INC EDI							;increment to the next position
 0000004C  C7 87 00000014 R			MOV [strStartAddr + EDI], 32	;put the character space at the addr offset edi
	   00000020
 00000056  47					INC EDI							;increment to the next position
 00000057  8B D9				MOV EBX, ECX					;stores the current value of ECX into EBX
 00000059  8B 0D 00000008 R			MOV ECX, iWidth					;sets the new value of ECX to the width of the rectangle.
 0000005F					lpCreateStars:
 0000005F  C7 87 00000014 R				MOV [strStartAddr + EDI], 42;put the character * at the addr offset edi
	   0000002A
 00000069  47						INC EDI						;increment to the next position
 0000006A  C7 87 00000014 R				MOV [strStartAddr + EDI], 32;put the character space at the addr offset edi
	   00000020
 00000074  47						INC EDI						;increment to the next position
 00000075  E2 E8				loop lpCreateStars				;decrement ECX and go to the top of the loop
 00000077  8B CB				MOV ECX, EBX					;restores our old ECX value
 00000079  C7 87 00000014 R			MOV [strStartAddr + EDI], 10	;put the new line at the addr offset edi
	   0000000A
 00000083  47					INC EDI							;increment to the next position
 00000084  C7 87 00000014 R			MOV [strStartAddr + EDI], 32	;put the character space at the addr offset edi
	   00000020
 0000008E  47					INC EDI							;increment to the next position
 0000008F  E2 B0			loop lpCreateRectangle				;decrement ECX and go to the top of the loop
 00000091  C7 87 00000014 R		MOV [strStartAddr + EDI], 00		;put the null character at the end to signal that this is the end of the loop
	   00000000
 0000009B  B8 00000014 R		MOV EAX, OFFSET strStartAddr		;moves the offset of the strStartAddr into EAX for return address
 000000A0  5D				POP EBP								;restore original EBP
 000000A1  C3				RET									;return
 000000A2			createRectangle ENDP


				COMMENT %
				******************************************************************************
				*Name: createTriangle                                                        *
				*Purpose:                                                                    *
				*	     *
				*                                                                            *
				*Date Created: 10/12/2019                                                    *
				*Date Modified: 10/12/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param iHeight:dword                                                        *
				*****************************************************************************%
 000000A2			createTriangle  PROC Near32
 000000A2  55				PUSH EBP							;preserves base register
 000000A3  8B EC			MOV EBP, ESP						;sets a new stack frame
 000000A5  B8 00000000			MOV EAX, 0							;clear out EAX to avoid error
 000000AA  8B 45 08			MOV EAX, [EBP + 8]					;moves the variable passed in into eax
 000000AD  A3 0000000C R		MOV iHeight, EAX					;moves the variable into iHeight
 000000B2  A3 00000000 R		MOV strSize, EAX					;moves the value into eax into strSize, this should be enough memory to hold what we need.				
					
					INVOKE heapAllocHarrison, strSize	;calls the allocation method to allocate strSize words in memory that we can use to hold our string
 000000C2  A3 00000014 R		MOV strStartAddr, EAX				;moves the address of the first byte in our allocated memory into a variable
					
 000000C7  BF 00000000			MOV EDI, 0							;set EDI to 0 to reference the beginning of the string
 000000CC  C7 87 00000014 R		MOV [strStartAddr + EDI], 10		;put the new line at the addr offset edi
	   0000000A
 000000D6  47				INC EDI								;increment to the next position
 000000D7  C7 87 00000014 R		MOV [strStartAddr + EDI], 10		;put the new line at the addr offset edi
	   0000000A
 000000E1  47				INC EDI								;increment to the next position
 000000E2  B9 00000000			MOV ECX, 0							;clear out ECX just in case
 000000E7  8A 0D 0000000C R		MOV CL, byte ptr iHeight			;moves the height of the triangle to CL so the loop knows when to terminate
 000000ED  C7 05 00000010 R		MOV iTemp, 1						;set the initial value of iTemp to 1 because there will always be atleast 1 star
	   00000001
					
 000000F7				lpDrawTriangle:
 000000F7  C7 87 00000014 R			MOV [strStartAddr + EDI], 09	;put the character tab at the addr offset edi
	   00000009
 00000101  47					INC EDI							;increment to the next position
 00000102  C7 87 00000014 R			MOV [strStartAddr + EDI], 32	;put the character space at the addr offset edi
	   00000020
 0000010C  47					INC EDI							;increment to the next position
 0000010D  8B D9				MOV EBX, ECX					;stores the current value of ECX into EBX
 0000010F  8B 0D 00000010 R			MOV ECX, iTemp					;moves into ECX iTemp, so the loop knows how many stars to insert
 00000115						lpPutStars:					
 00000115  C7 87 00000014 R					MOV [strStartAddr + EDI], 42	;put the character * at the addr offset edi
	   0000002A
 0000011F  47							INC EDI							;increment to the next position
 00000120  C7 87 00000014 R					MOV [strStartAddr + EDI], 32	;put the character space at the addr offset edi
	   00000020
 0000012A  47							INC EDI							;increment to the next position
 0000012B  E2 E8					loop lpPutStars						;decrement ECX and go to the top of the loop
 0000012D  C7 87 00000014 R			MOV [strStartAddr + EDI], 10			;put the new line at the addr offset edi
	   0000000A
 00000137  47					INC EDI									;increment to the next position
 00000138  FF 05 00000010 R			INC iTemp						;increment our Temp variable to we add another star for the next line.
 0000013E  8B CB				MOV ECX, EBX					;restores our old ECX value
 00000140  E2 B5			loop lpDrawTriangle					;decrement ECX and go to the top of the loop
 00000142  C7 87 00000014 R		MOV [strStartAddr + EDI], 00		;put the null character at the end to signal that this is the end of the loop
	   00000000
 0000014C  B8 00000014 R		MOV EAX, OFFSET strStartAddr		;moves the offset of the strStartAddr into EAX for return address
 00000151  5D				POP EBP								;restore original EBP
 00000152  C3				RET									;return
 00000153			createTriangle ENDP

				END
Microsoft (R) Macro Assembler Version 6.11		    10/13/19 00:20:17
proj3procs.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000018 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000153 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

createRectangle  . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A2 Public
  lpCreateRectangle  . . . . . .	L Near	 00000041 _TEXT	
  lpCreateStars  . . . . . . . .	L Near	 0000005F _TEXT	
createTriangle . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 000000B1 Public
  lpDrawTriangle . . . . . . . .	L Near	 000000F7 _TEXT	
  lpPutStars . . . . . . . . . .	L Near	 00000115 _TEXT	
heapAllocHarrison  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
iHeight  . . . . . . . . . . . .	DWord	 0000000C _DATA	
iLength  . . . . . . . . . . . .	DWord	 00000004 _DATA	
iTemp  . . . . . . . . . . . . .	DWord	 00000010 _DATA	
iWidth . . . . . . . . . . . . .	DWord	 00000008 _DATA	
strSize  . . . . . . . . . . . .	DWord	 00000000 _DATA	
strStartAddr . . . . . . . . . .	DWord	 00000014 _DATA	

	   0 Warnings
	   0 Errors
