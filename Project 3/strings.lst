Microsoft (R) Macro Assembler Version 6.11		    10/13/19 00:26:30
strings.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: strings.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:          Proj3
				;*  Date:         10/19/2019
				;*  Purpose:      A couple string classes that can intake a string and count bytes, and 
				;*				  also intake a string and copy it.
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
 00000000			.code

				COMMENT %
				******************************************************************************
				*Name: sizeOfString                                                          *
				*Purpose:                                                                    *
				*	counts the number of bytes in a string and returns the number in eax     *
				*                                                                            *
				*Date Created: 10/12/2019                                                    *
				*Date Modified: 10/12/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:dword                                                        *
				*@returns numOfBytes:dword													 *
				*****************************************************************************%
 00000000			sizeOfString PROC Near32
 00000000  55				PUSH EBP							;preserves base register
 00000001  8B EC			MOV EBP, ESP						;sets a new stack frame
 00000003  53				PUSH EBX							;pushes EBX to the stack to store this
 00000004  56				PUSH ESI							;pushes ESI to the stack to preseve
 00000005  8B 5D 08			MOV EBX, [EBP + 8]					;moves into ebx the first val in the stack that we are going to use
 00000008  BE 00000000			MOV ESI, 0							;sets the initial point to 0
						
 0000000D				stLoop:
 0000000D  80 3C 1E 00				CMP byte ptr [EBX + ESI], 0		;compares the two positions to determine if this is the end of the string
 00000011  74 03				JE finished						;if it is jump to finished
 00000013  46					INC ESI							;if not increment esi
 00000014  EB F7				JMP stLoop						;jump to the top of the loop and look at the next char
 00000016				finished:		
 00000016  46					INC ESI							;increment esi to include the null character in the string
 00000017  8B C6				MOV EAX, ESI					;move the value of esi into eax for proper output and return
					
 00000019  5E				POP ESI								;restore original esi
 0000001A  5B				POP EBX								;restore original ebx
 0000001B  5D				POP EBP
 0000001C  C3				RET									;return
 0000001D			sizeOfString ENDP

				END
Microsoft (R) Macro Assembler Version 6.11		    10/13/19 00:26:30
strings.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000001D DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

sizeOfString . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001D Public
  stLoop . . . . . . . . . . . .	L Near	 0000000D _TEXT	
  finished . . . . . . . . . . .	L Near	 00000016 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
