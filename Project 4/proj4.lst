Microsoft (R) Macro Assembler Version 6.11		    10/22/19 17:38:08
proj4.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj4.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001 
				;*  Lab:          Proj4
				;*  Date:         11/02/2019
				;*  Purpose:      This is the driver program that handles input and output and calls other classes to 
				;*				  manipulate matrices 
				;******************************************************************************************

					.486						;This tells assembler to generate 32-bit code

					.model flat					;This tells assembler that all addresses are real addresses

					.stack 100h					;EVERY program needs to have a stack allocated

				;******************************************************************************************

				;  List all necessary prototypes for methods to be called here

					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  					;Executes "normal" termination

					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword			;Will convert any D-Word number into ACSII characters

					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  				;Will display ;characters until the NULL character is found

					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword ;Get input from user and convert. 

					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  				;This converts ASCII characters to the dword value

				;******************************************************************************************

				;EXTERN sizeOfString:near32,createRectangle:near32,createTriangle:near32,createStringCopy:near32,hollowRectangle:near32, hollowTriangle:near32

				;******************************************************************************************

				COMMENT %

				******************************************************************************
				*Name: DisplayString                                                         *
				*Purpose:                                                                    *
				*	The purpose of this macro is to display a set of strings to the console  *
				*                                                                            *
				*Date Created: 10/02/2019                                                    *
				*Date Modified: 10/02/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				DisplayString MACRO String:REQ

					INVOKE putstring, ADDR String    				;;display The string passed in 

				ENDM

				COMMENT %
				******************************************************************************
				*Name: AscInt                                                                *
				*Purpose:                                                                    *
				*	Converts ascii value to int and stores in dVal							 *
				*                                                                            *
				*Date Created: 10/02/2019                                                    *
				*Date Modified: 10/02/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				IntAsc MACRO String:REQ, val:REQ

					INVOKE intasc32, ADDR String, ADDR val  		;;invoke ascint proc 

				ENDM

				COMMENT %
				******************************************************************************
				*Name: PullString                                                            *
				*Purpose:                                                                    *
				*	The purpose is to get information from the user and store into a variable*
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*@param limit:byte                                                           *
				*****************************************************************************%
				PullString MACRO String:REQ, limit:REQ

						INVOKE getstring, ADDR String, limit		;Take the string input and store it into a variable, max amount of chars typed is sNumChars
						
				ENDM

				COMMENT %
				******************************************************************************
				*Name: CvtoToNum                                                             *
				*Purpose:                                                                    *
				*	converts a string to its real decimal number.                            *
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				CvtoNum MACRO String:REQ

					INVOKE ascint32, ADDR String					;Convert the ASCII value to its true decimal number
					
				ENDM

				;******************************************************************************************
 00000000			.DATA
 00000000 0A 0D 09 4E 61		strProjInfo byte  10,13,9,
	   6D 65 3A 20 52
	   79 61 6E 20 53
	   68 75 70 65 0A
	   20 20 20 20 20
	   20 20 43 6C 61
	   73 73 3A 20 43
	   53 43 49 20 32
	   31 36 30 2D 30
	   30 31 0A 20 20
	   20 20 20 20 20
	   20 44 61 74 65
	   3A 20 31 31 2F
	   30 32 2F 32 30
	   31 39 0A 20 20
	   20 20 20 20 20
	   20 20 4C 61 62
	   3A 20 50 72 6F
	   6A 65 63 74 20
	   34 00
				        "Name: Ryan Shupe",10,
				"       Class: CSCI 2160-001",10,
				"        Date: 11/02/2019",10,
				"         Lab: Project 4",0

 00000061 0A 0A 0A 0D 09		strMenu byte 10,10,10,13,9, "M E N U",10,
	   4D 20 45 20 4E
	   20 55 0A 61 29
	   20 49 6E 70 75
	   74 20 41 4E 44
	   20 45 78 74 72
	   61 63 74 20 76
	   61 6C 75 65 73
	   20 66 6F 72 20
	   6D 61 74 72 69
	   78 20 41 0A 62
	   29 20 49 6E 70
	   75 74 20 41 4E
	   44 20 45 78 74
	   72 61 63 74 20
	   76 61 6C 75 65
	   73 20 66 6F 72
	   20 6D 61 74 72
	   69 78 20 42 0A
	   63 29 20 44 69
	   73 70 6C 61 79
	   20 76 61 6C 75
	   65 73 20 69 6E
	   20 61 72 72 61
	   79 20 41 0A 64
	   29 20 44 69 73
	   70 6C 61 79 20
	   76 61 6C 75 65
	   73 20 69 6E 20
	   61 72 72 61 79
	   20 42 0A 65 29
	   20 41 64 64 20
	   75 70 20 74 68
	   65 20 76 61 6C
	   75 65 73 20 69
	   6E 20 41 20 61
	   72 72 61 79 0A
	   66 29 20 41 64
	   64 20 75 70 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   20 69 6E 20 42
	   20 61 72 72 61
	   79 0A 67 29 20
	   53 6F 72 74 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 61 72 72 61
	   79 20 41 0A 68
	   29 20 53 6F 72
	   74 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   6F 66 20 61 72
	   72 61 79 20 42
	   00
					"a) Input AND Extract values for matrix A",10,
					"b) Input AND Extract values for matrix B",10,
					"c) Display values in array A",10,
					"d) Display values in array B",10,
					"e) Add up the values in A array",10,
					"f) Add up the values in B array",10,
					"g) Sort and display the values of array A",10,
					"h) Sort and display the values of array B",0
					
 0000018E 0A 69 29 20 4D		strMenu2 byte 10,
	   75 6C 74 69 70
	   6C 79 20 6D 61
	   74 72 69 78 20
	   41 20 61 6E 64
	   20 42 20 74 6F
	   20 67 65 74 20
	   6D 61 74 72 69
	   78 20 43 0A 6A
	   29 20 44 69 73
	   70 6C 61 79 20
	   76 61 6C 75 65
	   73 20 69 6E 20
	   6D 61 74 72 69
	   78 20 43 0A 6B
	   29 20 41 64 64
	   20 75 70 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   69 6E 20 43 20
	   61 72 72 61 79
	   0A 6C 29 20 53
	   6F 72 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 20 6F 66 20
	   61 72 72 61 79
	   20 43 0A 6D 29
	   20 53 6D 61 6C
	   6C 65 73 74 20
	   56 61 6C 75 65
	   20 69 6E 20 61
	   72 72 61 79 20
	   41 0A 6E 29 20
	   53 6D 61 6C 6C
	   65 73 74 20 56
	   61 6C 75 65 20
	   69 6E 20 61 72
	   72 61 79 20 42
	   0A 6F 29 20 53
	   6D 61 6C 6C 65
	   73 74 20 76 61
	   6C 75 65 20 69
	   6E 20 61 72 72
	   61 79 20 43 0A
	   70 29 0A 71 29
	   20 45 58 49 54
	   20 70 72 6F 67
	   72 61 6D 0A 0A
	   0D 00
					"i) Multiply matrix A and B to get matrix C",10,
					"j) Display values in matrix C",10,
					"k) Add up the values in C array",10,
					"l) Sort and display the values of array C",10,
					"m) Smallest Value in array A",10,
					"n) Smallest Value in array B",10,
					"o) Smallest value in array C",10,
					"p)",10,
					"q) EXIT program",10,10,13,0
 0000028F 0A 0A 0A 0A 0A		clearScr byte 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0
	   0A 0A 0A 0A 0A
	   0A 0A 0A 0A 0A
	   0A 00
 000002A0 0A 0D 54 79 70		strTypeChoice byte 10,13, "Type the letter of your choice: ",0
	   65 20 74 68 65
	   20 6C 65 74 74
	   65 72 20 6F 66
	   20 79 6F 75 72
	   20 63 68 6F 69
	   63 65 3A 20 00
					
 000002C3 00				choiceASCII byte ?

				;******************************************************************************************
 00000000			.CODE

 00000000			_start:
 00000000  B8 00000000			MOV EAX, 0										;Statement to help in debugging
					
 00000005 00000005		main PROC

					DisplayString strProjInfo						;display the string that contains the project information
					
 0000000F			getUserChoice:	
					DisplayString strMenu							;display the first part of the menu
					DisplayString strMenu2							;display the second part of the menu
					DisplayString strTypeChoice						;display the message "enter choice"
					
					PullString choiceASCII, 1						;read in the next line that the user inputs and store the ascii value.
					
 00000039  80 3D 000002C3 R		CMP choiceASCII, 65								;compare the ascii value to a capital A
	   41
 00000040  0F 84 0000016E		JE choiceA										;if it is equal to the capital value, jump to the choiceA secion of the code.
 00000046  80 3D 000002C3 R		CMP choiceASCII, 97								;compare the ascii value to the lowercase a
	   61
 0000004D  0F 84 00000161		JE choiceA										;if it is equal to this number then jump to the choiceA section.
					
 00000053  80 3D 000002C3 R		CMP choiceASCII, 66								;compare the ascii value to a capital B
	   42
 0000005A  0F 84 00000154		JE choiceB										;if it is equal to the capital value, jump to the choiceB secion of the code.
 00000060  80 3D 000002C3 R		CMP choiceASCII, 98								;compare the ascii value to the lowercase b
	   62
 00000067  0F 84 00000147		JE choiceB										;if it is equal to this number then jump to the choiceB section.
					
 0000006D  80 3D 000002C3 R		CMP choiceASCII, 67								;compare the ascii value to a capital C
	   43
 00000074  0F 84 0000013A		JE choiceC										;if it is equal to this number then jump to the choiceC section.
 0000007A  80 3D 000002C3 R		CMP choiceASCII, 99								;compare the ascii value to the lowercase c
	   63
 00000081  0F 84 0000012D		JE choiceC										;if it is equal to this number then jump to the choiceC section.
					
 00000087  80 3D 000002C3 R		CMP choiceASCII, 68								;compare the ascii value to a capital D
	   44
 0000008E  0F 84 00000120		JE choiceD										;if it is equal to this number then jump to the choiceD section.
 00000094  80 3D 000002C3 R		CMP choiceASCII, 100							;compare the ascii value to the lowercase d
	   64
 0000009B  0F 84 00000113		JE choiceD										;if it is equal to this number then jump to the choiceD section.
					
 000000A1  80 3D 000002C3 R		CMP choiceASCII, 69								;compare the ascii value to a capital E
	   45
 000000A8  0F 84 00000106		JE choiceE										;if it is equal to this number then jump to the choiceE section.
 000000AE  80 3D 000002C3 R		CMP choiceASCII, 101							;compare the ascii value to the lowercase e
	   65
 000000B5  0F 84 000000F9		JE choiceE										;if it is equal to this number then jump to the choiceE section.
					
 000000BB  80 3D 000002C3 R		CMP choiceASCII, 70								;compare the ascii value to a capital F
	   46
 000000C2  0F 84 000000EC		JE choiceF										;if it is equal to this number then jump to the choiceF section.
 000000C8  80 3D 000002C3 R		CMP choiceASCII, 102							;compare the ascii value to the lowercase f
	   66
 000000CF  0F 84 000000DF		JE choiceF										;if it is equal to this number then jump to the choiceF section.
					
 000000D5  80 3D 000002C3 R		CMP choiceASCII, 71								;compare the ascii value to a capital G
	   47
 000000DC  0F 84 000000D2		JE choiceG										;if it is equal to this number then jump to the choiceG section.
 000000E2  80 3D 000002C3 R		CMP choiceASCII, 103							;compare the ascii value to the lowercase g
	   67
 000000E9  0F 84 000000C5		JE choiceG										;if it is equal to this number then jump to the choiceG section.
					
 000000EF  80 3D 000002C3 R		CMP choiceASCII, 72								;compare the ascii value to a capital H
	   48
 000000F6  0F 84 000000B8		JE choiceH										;if it is equal to this number then jump to the choiceH section.
 000000FC  80 3D 000002C3 R		CMP choiceASCII, 104							;compare the ascii value to the lowercase h
	   68
 00000103  0F 84 000000AB		JE choiceH										;if it is equal to this number then jump to the choiceH section.
					
 00000109  80 3D 000002C3 R		CMP choiceASCII, 73								;compare the ascii value to a capital I
	   49
 00000110  0F 84 0000009E		JE choiceI										;if it is equal to this number then jump to the choiceI section.
 00000116  80 3D 000002C3 R		CMP choiceASCII, 105							;compare the ascii value to the lowercase i
	   69
 0000011D  0F 84 00000091		JE choiceI										;if it is equal to this number then jump to the choiceI section.
					
 00000123  80 3D 000002C3 R		CMP choiceASCII, 74								;compare the ascii value to a capital J
	   4A
 0000012A  0F 84 00000084		JE choiceJ										;if it is equal to this number then jump to the choiceJ section.
 00000130  80 3D 000002C3 R		CMP choiceASCII, 106							;compare the ascii value to the lowercase j
	   6A
 00000137  74 7B			JE choiceJ										;if it is equal to this number then jump to the choiceJ section.
					
 00000139  80 3D 000002C3 R		CMP choiceASCII, 75								;compare the ascii value to a capital K
	   4B
 00000140  74 72			JE choiceK										;if it is equal to this number then jump to the choiceK section.
 00000142  80 3D 000002C3 R		CMP choiceASCII, 107							;compare the ascii value to the lowercase k
	   6B
 00000149  74 69			JE choiceK										;if it is equal to this number then jump to the choiceK section.
					
 0000014B  80 3D 000002C3 R		CMP choiceASCII, 76								;compare the ascii value to a capital L
	   4C
 00000152  74 60			JE choiceL										;if it is equal to this number then jump to the choiceL section.
 00000154  80 3D 000002C3 R		CMP choiceASCII, 108							;compare the ascii value to the lowercase l
	   6C
 0000015B  74 57			JE choiceL										;if it is equal to this number then jump to the choiceL section.
					
 0000015D  80 3D 000002C3 R		CMP choiceASCII, 77								;compare the ascii value to a capital M
	   4D
 00000164  74 4E			JE choiceM										;if it is equal to this number then jump to the choiceM section.
 00000166  80 3D 000002C3 R		CMP choiceASCII, 109							;compare the ascii value to the lowercase m
	   6D
 0000016D  74 45			JE choiceM										;if it is equal to this number then jump to the choiceM section.
					
 0000016F  80 3D 000002C3 R		CMP choiceASCII, 78								;compare the ascii value to a capital N
	   4E
 00000176  74 3C			JE choiceN										;if it is equal to this number then jump to the choiceN section.
 00000178  80 3D 000002C3 R		CMP choiceASCII, 110							;compare the ascii value to the lowercase n
	   6E
 0000017F  74 33			JE choiceN										;if it is equal to this number then jump to the choiceN section.
					
 00000181  80 3D 000002C3 R		CMP choiceASCII, 79								;compare the ascii value to a capital O
	   4F
 00000188  74 2A			JE choiceO										;if it is equal to this number then jump to the choiceO section
 0000018A  80 3D 000002C3 R		CMP choiceASCII, 111							;compare the ascii value to the lowercase o
	   6F
 00000191  74 21			JE choiceO										;if it is equal to this number then jump to the choiceO section.
					
 00000193  80 3D 000002C3 R		CMP choiceASCII, 81								;compare the ascii value to a capital Q
	   51
 0000019A  74 18			JE choiceQ										;if it is equal to this number then jump to the choiceQ section.
 0000019C  80 3D 000002C3 R		CMP choiceASCII, 113							;compare the ascii value to the lowercase q
	   71
 000001A3  74 0F			JE choiceQ										;if it is equal to this number then jump to the choiceQ section.
						
					DisplayString clearScr	
 000001AF  E9 FFFFFE5B			JMP getUserChoice
					
					
 000001B4			choiceA:
					;DisplayString "A"
 000001B4			choiceB:
 000001B4			choiceC:
 000001B4			choiceD:
 000001B4			choiceE:
 000001B4			choiceF:
 000001B4			choiceG:
 000001B4			choiceH:
 000001B4			choiceI:
 000001B4			choiceJ:
 000001B4			choiceK:
 000001B4			choiceL:
 000001B4			choiceM:
 000001B4			choiceN:
 000001B4			choiceO:
 000001B4			choiceQ:
 000001B4  EB 00			JMP finished									;Jump to the end of the program, terminate.

				;************************************* the instructions below calls for "normal termination"	
 000001B6			finished:
					INVOKE ExitProcess,0						 
					PUBLIC _start
					
 000001BD			main ENDP
					END												;Signals assembler that there are no instructions after this statement
Microsoft (R) Macro Assembler Version 6.11		    10/22/19 17:38:08
proj4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CvtoNum  . . . . . . . . . . . .	Proc
DisplayString  . . . . . . . . .	Proc
IntAsc . . . . . . . . . . . . .	Proc
PullString . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002C4 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001BD DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 000001B8 Public
  getUserChoice  . . . . . . . .	L Near	 0000000F _TEXT	
  choiceA  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceB  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceC  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceD  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceE  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceF  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceG  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceH  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceI  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceJ  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceK  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceL  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceM  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceN  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceO  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  choiceQ  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  finished . . . . . . . . . . .	L Near	 000001B6 _TEXT	
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
choiceASCII  . . . . . . . . . .	Byte	 000002C3 _DATA	
clearScr . . . . . . . . . . . .	Byte	 0000028F _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 0000018E _DATA	
strMenu  . . . . . . . . . . . .	Byte	 00000061 _DATA	
strProjInfo  . . . . . . . . . .	Byte	 00000000 _DATA	
strTypeChoice  . . . . . . . . .	Byte	 000002A0 _DATA	

	   0 Warnings
	   0 Errors
