Microsoft (R) Macro Assembler Version 6.11		    10/27/19 14:12:49
proj4.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: proj4.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001 
				;*  Lab:          Proj4
				;*  Date:         11/02/2019
				;*  Purpose:      This is the driver program that handles input and output and calls other classes to 
				;*				  manipulate matrices 
				;******************************************************************************************

					.486						;This tells assembler to generate 32-bit code

					.model flat					;This tells assembler that all addresses are real addresses

					.stack 100h					;EVERY program needs to have a stack allocated

				;******************************************************************************************

				;  List all necessary prototypes for methods to be called here

					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  					;Executes "normal" termination

					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword			;Will convert any D-Word number into ACSII characters

					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  				;Will display ;characters until the NULL character is found

					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword ;Get input from user and convert. 

					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  				;This converts ASCII characters to the dword value
					
					extractDwords PROTO Near32 C, StringofChars:dword, ArrayDwords:dword
					
					displayArray PROTO Near32 C, lpArrayDwords:dword, rows:dword, cols:dword, lpStringtoHold:dword
					
					selectionSort PROTO Near32 C, lpArrayDwords:dword, iLength:dword
					
					sumUpArray PROTO Near32 C, lpArrayDwords:dword, rows:dword, cols:dword
					
					smallestValue PROTO Near32 C, lpArrayDwords:dword, rows:dword, cols:dword

				;******************************************************************************************

				COMMENT %

				******************************************************************************
				*Name: DisplayString                                                         *
				*Purpose:                                                                    *
				*	The purpose of this macro is to display a set of strings to the console  *
				*                                                                            *
				*Date Created: 10/02/2019                                                    *
				*Date Modified: 10/02/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				DisplayString MACRO String:REQ

					INVOKE putstring, ADDR String    				;;display The string passed in 

				ENDM

				COMMENT %
				******************************************************************************
				*Name: PullString                                                            *
				*Purpose:                                                                    *
				*	The purpose is to get information from the user and store into a variable*
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*@param limit:byte                                                           *
				*****************************************************************************%
				PullString MACRO String:REQ, limit:REQ

						INVOKE getstring, ADDR String, limit		;Take the string input and store it into a variable, max amount of chars typed is sNumChars
						
				ENDM

				COMMENT %
				******************************************************************************
				*Name: CvtoToNum                                                             *
				*Purpose:                                                                    *
				*	converts a string to its real decimal number.                            *
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				CvtoNum MACRO String:REQ

					INVOKE ascint32, ADDR String					;Convert the ASCII value to its true decimal number
					
				ENDM

				COMMENT %

				******************************************************************************
				*Name: getBytes                                                              *
				*Purpose:                                                                    *
				*	  Intakes an address and counts the number of bytes into a string including*
				*     the null char and returns the number.                                  *
				*Date Created: 10/24/2019                                                    *
				*Date Modified: 10/25/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				getBytes MACRO String:REQ
					LOCAL stLoop
					LOCAL done
					PUSH EBP							;preserves base register
					MOV EBP, ESP						;sets a new stack frame
					PUSH EBX							;pushes EBX to the stack to store this
					PUSH ESI							;pushes ESI to the stack to preseve
					MOV EBX, String						;moves into ebx the first val in the stack that we are going to use
					MOV ESI, 0							;sets the initial point to 0
						
					stLoop:
						CMP byte ptr [EBX + ESI], 0		;compares the two positions to determine if this is the end of the string
						JE done							;if it is jump to finished
						INC ESI							;if not increment esi
						JMP stLoop						;jump to the top of the loop and look at the next char
					done:		
						INC ESI							;increment esi to include the null character in the string
						MOV EAX, ESI					;move the value of esi into eax for proper output and return
					
					POP ESI								;restore original esi
					POP EBX								;restore original ebx
					POP EBP								;restore originla ebp
				ENDM

				;******************************************************************************************
 00000000			.DATA
 00000000 0A 0D 09 4E 61		strProjInfo byte  10,13,9,
	   6D 65 3A 20 52
	   79 61 6E 20 53
	   68 75 70 65 0A
	   20 20 20 20 20
	   20 20 43 6C 61
	   73 73 3A 20 43
	   53 43 49 20 32
	   31 36 30 2D 30
	   30 31 0A 20 20
	   20 20 20 20 20
	   20 44 61 74 65
	   3A 20 31 31 2F
	   30 32 2F 32 30
	   31 39 0A 20 20
	   20 20 20 20 20
	   20 20 4C 61 62
	   3A 20 50 72 6F
	   6A 65 63 74 20
	   34 00
				        "Name: Ryan Shupe",10,
				"       Class: CSCI 2160-001",10,
				"        Date: 11/02/2019",10,
				"         Lab: Project 4",0

 00000061 0A 0A 0A 0D 09		strMenu byte 10,10,10,13,9, "M E N U",10,
	   4D 20 45 20 4E
	   20 55 0A 61 29
	   20 53 65 74 20
	   76 61 6C 75 65
	   73 20 66 6F 72
	   20 6D 61 74 72
	   69 78 20 41 0A
	   62 29 20 53 65
	   74 20 76 61 6C
	   75 65 73 20 66
	   6F 72 20 6D 61
	   74 72 69 78 20
	   42 0A 63 29 20
	   44 69 73 70 6C
	   61 79 20 76 61
	   6C 75 65 73 20
	   69 6E 20 61 72
	   72 61 79 20 41
	   0A 64 29 20 44
	   69 73 70 6C 61
	   79 20 76 61 6C
	   75 65 73 20 69
	   6E 20 61 72 72
	   61 79 20 42 0A
	   65 29 20 41 64
	   64 20 75 70 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   20 69 6E 20 41
	   20 61 72 72 61
	   79 0A 66 29 20
	   41 64 64 20 75
	   70 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 69 6E
	   20 42 20 61 72
	   72 61 79 0A 67
	   29 20 53 6F 72
	   74 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   6F 66 20 61 72
	   72 61 79 20 41
	   0A 68 29 20 53
	   6F 72 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 20 6F 66 20
	   61 72 72 61 79
	   20 42 00
					"a) Set values for matrix A",10,
					"b) Set values for matrix B",10,
					"c) Display values in array A",10,
					"d) Display values in array B",10,
					"e) Add up the values in A array",10,
					"f) Add up the values in B array",10,
					"g) Sort and display the values of array A",10,
					"h) Sort and display the values of array B",0
					
 00000172 0A 69 29 20 4D		strMenu2 byte 10,
	   75 6C 74 69 70
	   6C 79 20 6D 61
	   74 72 69 78 20
	   41 20 61 6E 64
	   20 42 20 74 6F
	   20 67 65 74 20
	   6D 61 74 72 69
	   78 20 43 0A 6A
	   29 20 44 69 73
	   70 6C 61 79 20
	   76 61 6C 75 65
	   73 20 69 6E 20
	   6D 61 74 72 69
	   78 20 43 0A 6B
	   29 20 41 64 64
	   20 75 70 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   69 6E 20 43 20
	   61 72 72 61 79
	   0A 6C 29 20 53
	   6F 72 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 20 6F 66 20
	   61 72 72 61 79
	   20 43 0A 6D 29
	   20 53 6D 61 6C
	   6C 65 73 74 20
	   56 61 6C 75 65
	   20 69 6E 20 61
	   72 72 61 79 20
	   41 0A 6E 29 20
	   53 6D 61 6C 6C
	   65 73 74 20 56
	   61 6C 75 65 20
	   69 6E 20 61 72
	   72 61 79 20 42
	   0A 6F 29 20 53
	   6D 61 6C 6C 65
	   73 74 20 76 61
	   6C 75 65 20 69
	   6E 20 61 72 72
	   61 79 20 43 0A
	   70 29 0A 71 29
	   20 45 58 49 54
	   20 70 72 6F 67
	   72 61 6D 0A 0A
	   0D 00
					"i) Multiply matrix A and B to get matrix C",10,
					"j) Display values in matrix C",10,
					"k) Add up the values in C array",10,
					"l) Sort and display the values of array C",10,
					"m) Smallest Value in array A",10,
					"n) Smallest Value in array B",10,
					"o) Smallest value in array C",10,
					"p)",10,
					"q) EXIT program",10,10,13,0
 00000273 0A 0A 0A 0A 0A		clearScr byte 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0
	   0A 0A 0A 0A 0A
	   0A 0A 0A 0A 0A
	   0A 00
 00000284 0A 0D 54 79 70		strTypeChoice byte 10,13, "Type the letter of your choice: ",0
	   65 20 74 68 65
	   20 6C 65 74 74
	   65 72 20 6F 66
	   20 79 6F 75 72
	   20 63 68 6F 69
	   63 65 3A 20 00
 000002A7 0A 0A 0D 45 6E		strAskValues byte 10,10,13, "Enter the values you wish to store in the array: ",0
	   74 65 72 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   79 6F 75 20 77
	   69 73 68 20 74
	   6F 20 73 74 6F
	   72 65 20 69 6E
	   20 74 68 65 20
	   61 72 72 61 79
	   3A 20 00
 000002DC 0A 0D 56 61 6C		strValuesStored byte 10,13, "Values successfully stored!", 0
	   75 65 73 20 73
	   75 63 63 65 73
	   73 66 75 6C 6C
	   79 20 73 74 6F
	   72 65 64 21 00
 000002FA 0A 0D 45 52 52		strMethodNotAdded byte 10,13, "ERROR! Method not implemented!", 0
	   4F 52 21 20 4D
	   65 74 68 6F 64
	   20 6E 6F 74 20
	   69 6D 70 6C 65
	   6D 65 6E 74 65
	   64 21 00
 0000031B 0A 0A 0D 50 72		enterToCont byte 10,10,13, "Press ENTER to Continue...",0
	   65 73 73 20 45
	   4E 54 45 52 20
	   74 6F 20 43 6F
	   6E 74 69 6E 75
	   65 2E 2E 2E 00
 00000339 0A 0A 0D 45 6E		enterValCol byte 10,10,13, "Enter a value for col: ",0
	   74 65 72 20 61
	   20 76 61 6C 75
	   65 20 66 6F 72
	   20 63 6F 6C 3A
	   20 00
 00000354 0A 0A 0D 45 6E		enterValRow byte 10,10,13, "Enter a value for row: ",0
	   74 65 72 20 61
	   20 76 61 6C 75
	   65 20 66 6F 72
	   20 72 6F 77 3A
	   20 00
 0000036F 0A 0A 0D 54 68		strSum byte 10,10,13, "The sum of the values in the array is: ", 0
	   65 20 73 75 6D
	   20 6F 66 20 74
	   68 65 20 76 61
	   6C 75 65 73 20
	   69 6E 20 74 68
	   65 20 61 72 72
	   61 79 20 69 73
	   3A 20 00
 0000039A 0A 0A 0D 54 68		strSmallestNum byte 10,10,13, "The smallest value in the array is: ", 0
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 20 69 6E 20
	   74 68 65 20 61
	   72 72 61 79 20
	   69 73 3A 20 00
 000003C2 0A 0A 0D 45 6E		strSortLength byte 10,10,13, "Enter the number of elements you want to sort in the array: ",0
	   74 65 72 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 65 6C
	   65 6D 65 6E 74
	   73 20 79 6F 75
	   20 77 61 6E 74
	   20 74 6F 20 73
	   6F 72 74 20 69
	   6E 20 74 68 65
	   20 61 72 72 61
	   79 3A 20 00
 00000402 0A 0A 0D 45 52		strLocked byte 10,10,13, "ERROR: This method is currently locked!", 0
	   52 4F 52 3A 20
	   54 68 69 73 20
	   6D 65 74 68 6F
	   64 20 69 73 20
	   63 75 72 72 65
	   6E 74 6C 79 20
	   6C 6F 63 6B 65
	   64 21 00
 0000042D 0A 0D 00			crlf byte  10,13,0								;Null-terminated string to skip to new line
 00000430 00				choiceASCII byte 0
 00000431  00000064 [			strDisplay dword 100 dup(0)
	    00000000
	   ]
 000005C1  00000064 [			numbersASCII byte 100 dup (?), 00
	    00
	   ] 00
 00000626  00000064 [			arrayA dword 100 dup (?)
	    00000000
	   ]
 000007B6  00000064 [			arrayB dword 100 dup (?)
	    00000000
	   ]
 00000946 00				strEnter byte 0
 00000947 00000000			tempNum dword 0
 0000094B 00000000			numValues dword 0
 0000094F 00000000			rowA dword 0
 00000953 00000000			colA dword 0
 00000957 00000000			rowB dword 0
 0000095B 00000000			colB dword 0
 0000095F 00				matrixAActive byte 0
 00000960 00				matrixBActive byte 0


				;******************************************************************************************
 00000000			.CODE

 00000000			_start:
 00000000  B8 00000000			MOV EAX, 0										;Statement to help in debugging
					
 00000005 00000005		main PROC

					DisplayString strProjInfo						;display the string that contains the project information
					
 0000000F			getUserChoice:	
					DisplayString strMenu							;display the first part of the menu
					DisplayString strMenu2							;display the second part of the menu
					DisplayString strTypeChoice						;display the message "enter choice"
					
					PullString choiceASCII, 1						;read in the next line that the user inputs and store the ascii value.
					
 00000039  80 3D 00000430 R		CMP choiceASCII, 65								;compare the ascii value to a capital A
	   41
 00000040  0F 84 000001A2		JE choiceA										;if it is equal to the capital value, jump to the choiceA secion of the code.
 00000046  80 3D 00000430 R		CMP choiceASCII, 97								;compare the ascii value to the lowercase a
	   61
 0000004D  0F 84 00000195		JE choiceA										;if it is equal to this number then jump to the choiceA section.
					
 00000053  80 3D 00000430 R		CMP choiceASCII, 66								;compare the ascii value to a capital B
	   42
 0000005A  0F 84 0000021F		JE choiceB										;if it is equal to the capital value, jump to the choiceB secion of the code.
 00000060  80 3D 00000430 R		CMP choiceASCII, 98								;compare the ascii value to the lowercase b
	   62
 00000067  0F 84 00000212		JE choiceB										;if it is equal to this number then jump to the choiceB section.
					
 0000006D  80 3D 00000430 R		CMP choiceASCII, 67								;compare the ascii value to a capital C
	   43
 00000074  0F 84 0000029C		JE choiceC										;if it is equal to this number then jump to the choiceC section.
 0000007A  80 3D 00000430 R		CMP choiceASCII, 99								;compare the ascii value to the lowercase c
	   63
 00000081  0F 84 0000028F		JE choiceC										;if it is equal to this number then jump to the choiceC section.
					
 00000087  80 3D 00000430 R		CMP choiceASCII, 68								;compare the ascii value to a capital D
	   44
 0000008E  0F 84 00000344		JE choiceD										;if it is equal to this number then jump to the choiceD section.
 00000094  80 3D 00000430 R		CMP choiceASCII, 100							;compare the ascii value to the lowercase d
	   64
 0000009B  0F 84 00000337		JE choiceD										;if it is equal to this number then jump to the choiceD section.
					
 000000A1  80 3D 00000430 R		CMP choiceASCII, 69								;compare the ascii value to a capital E
	   45
 000000A8  0F 84 000003EC		JE choiceE										;if it is equal to this number then jump to the choiceE section.
 000000AE  80 3D 00000430 R		CMP choiceASCII, 101							;compare the ascii value to the lowercase e
	   65
 000000B5  0F 84 000003DF		JE choiceE										;if it is equal to this number then jump to the choiceE section.
					
 000000BB  80 3D 00000430 R		CMP choiceASCII, 70								;compare the ascii value to a capital F
	   46
 000000C2  0F 84 00000490		JE choiceF										;if it is equal to this number then jump to the choiceF section.
 000000C8  80 3D 00000430 R		CMP choiceASCII, 102							;compare the ascii value to the lowercase f
	   66
 000000CF  0F 84 00000483		JE choiceF										;if it is equal to this number then jump to the choiceF section.
					
 000000D5  80 3D 00000430 R		CMP choiceASCII, 71								;compare the ascii value to a capital G
	   47
 000000DC  0F 84 00000534		JE choiceG										;if it is equal to this number then jump to the choiceG section.
 000000E2  80 3D 00000430 R		CMP choiceASCII, 103							;compare the ascii value to the lowercase g
	   67
 000000E9  0F 84 00000527		JE choiceG										;if it is equal to this number then jump to the choiceG section.
					
 000000EF  80 3D 00000430 R		CMP choiceASCII, 72								;compare the ascii value to a capital H
	   48
 000000F6  0F 84 00000598		JE choiceH										;if it is equal to this number then jump to the choiceH section.
 000000FC  80 3D 00000430 R		CMP choiceASCII, 104							;compare the ascii value to the lowercase h
	   68
 00000103  0F 84 0000058B		JE choiceH										;if it is equal to this number then jump to the choiceH section.
					
 00000109  80 3D 00000430 R		CMP choiceASCII, 73								;compare the ascii value to a capital I
	   49
 00000110  0F 84 000005FC		JE choiceI										;if it is equal to this number then jump to the choiceI section.
 00000116  80 3D 00000430 R		CMP choiceASCII, 105							;compare the ascii value to the lowercase i
	   69
 0000011D  0F 84 000005EF		JE choiceI										;if it is equal to this number then jump to the choiceI section.
					
 00000123  80 3D 00000430 R		CMP choiceASCII, 74								;compare the ascii value to a capital J
	   4A
 0000012A  0F 84 000005E7		JE choiceJ										;if it is equal to this number then jump to the choiceJ section.
 00000130  80 3D 00000430 R		CMP choiceASCII, 106							;compare the ascii value to the lowercase j
	   6A
 00000137  0F 84 000005DA		JE choiceJ										;if it is equal to this number then jump to the choiceJ section.
					
 0000013D  80 3D 00000430 R		CMP choiceASCII, 75								;compare the ascii value to a capital K
	   4B
 00000144  0F 84 000005D2		JE choiceK										;if it is equal to this number then jump to the choiceK section.
 0000014A  80 3D 00000430 R		CMP choiceASCII, 107							;compare the ascii value to the lowercase k
	   6B
 00000151  0F 84 000005C5		JE choiceK										;if it is equal to this number then jump to the choiceK section.
					
 00000157  80 3D 00000430 R		CMP choiceASCII, 76								;compare the ascii value to a capital L
	   4C
 0000015E  0F 84 000005BD		JE choiceL										;if it is equal to this number then jump to the choiceL section.
 00000164  80 3D 00000430 R		CMP choiceASCII, 108							;compare the ascii value to the lowercase l
	   6C
 0000016B  0F 84 000005B0		JE choiceL										;if it is equal to this number then jump to the choiceL section.
					
 00000171  80 3D 00000430 R		CMP choiceASCII, 77								;compare the ascii value to a capital M
	   4D
 00000178  0F 84 000005A8		JE choiceM										;if it is equal to this number then jump to the choiceM section.
 0000017E  80 3D 00000430 R		CMP choiceASCII, 109							;compare the ascii value to the lowercase m
	   6D
 00000185  0F 84 0000059B		JE choiceM										;if it is equal to this number then jump to the choiceM section.
					
 0000018B  80 3D 00000430 R		CMP choiceASCII, 78								;compare the ascii value to a capital N
	   4E
 00000192  0F 84 0000064C		JE choiceN										;if it is equal to this number then jump to the choiceN section.
 00000198  80 3D 00000430 R		CMP choiceASCII, 110							;compare the ascii value to the lowercase n
	   6E
 0000019F  0F 84 0000063F		JE choiceN										;if it is equal to this number then jump to the choiceN section.
					
 000001A5  80 3D 00000430 R		CMP choiceASCII, 79								;compare the ascii value to a capital O
	   4F
 000001AC  0F 84 000006F0		JE choiceO										;if it is equal to this number then jump to the choiceO section
 000001B2  80 3D 00000430 R		CMP choiceASCII, 111							;compare the ascii value to the lowercase o
	   6F
 000001B9  0F 84 000006E3		JE choiceO										;if it is equal to this number then jump to the choiceO section.
					
 000001BF  80 3D 00000430 R		CMP choiceASCII, 81								;compare the ascii value to a capital Q
	   51
 000001C6  0F 84 000006D8		JE choiceQ										;if it is equal to this number then jump to the choiceQ section.
 000001CC  80 3D 00000430 R		CMP choiceASCII, 113							;compare the ascii value to the lowercase q
	   71
 000001D3  0F 84 000006CB		JE choiceQ										;if it is equal to this number then jump to the choiceQ section.
						
					DisplayString clearScr							;display the characters to clear the screen
 000001E3  E9 FFFFFE27			JMP getUserChoice								;jump back up to display the menu
					
					
 000001E8			choiceA: ;input a
 000001E8  B9 00000064			MOV ECX, lengthof arrayA						;moves the length of array a into ECX so we can clear that amount to clear the array
 000001ED				lpClearA:
 000001ED  C7 81 00000626 R		MOV arrayA[ECX], 0								;sets the byte at position ecx to 0 (this will exclude the first byte but thats ok because its going to be overwritten)
	   00000000
 000001F7  E2 F4			loop lpClearA									;decrement ECX and go to the top of the loop
					DisplayString strAskValues						;display the string asking which values to store
					PullString numbersASCII, 50						;get what the user typed and store into numbersASCII
					
					INVOKE extractDwords, OFFSET numbersASCII, 		;call the extract dwords function so we have our array properly loaded into mem
					OFFSET arrayA
					
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString strValuesStored					;display a helpful message telling the user that the values have been stored. 
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for the user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 00000273  C6 05 0000095F R		MOV matrixAActive, 1 							;set the matrix as active so it unlocks the other methods
	   01
 0000027A  E9 FFFFFD90			JMP getUserChoice								;jump back up to display the menu
 0000027F			choiceB: ;input b
 0000027F  B9 00000064			MOV ECX, lengthof arrayB						;moves the length of array a into ECX so we can clear that amount to clear the array
 00000284				lpClearB:
 00000284  C7 81 000007B6 R		MOV arrayB[ECX], 0								;sets the byte at position ecx to 0 (this will exclude the first byte but thats ok because its going to be overwritten)
	   00000000
 0000028E  E2 F4			loop lpClearB									;decrement ECX and go to the top of the loop
					DisplayString strAskValues						;display the string asking which values to store
					PullString numbersASCII, 50						;get what the user typed and store into numbersASCII
						
					INVOKE extractDwords, OFFSET numbersASCII, 		;call the extract dwords function so we have our array properly loaded into mem
					OFFSET arrayB
					
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString strValuesStored					;display a helpful message telling the user that the values have been stored.

					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for the user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 0000030A  C6 05 00000960 R		MOV matrixBActive, 1 							;set the matrix as active so it unlocks the other methods
	   01
 00000311  E9 FFFFFCF9			JMP getUserChoice								;jump back up to display the menu
 00000316			choiceC: ;display a
 00000316  80 3D 0000095F R		CMP matrixAActive, 1							;checks to see if the matrix is active before executing the method
	   01
 0000031D  0F 85 00000583		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowA, 10								;get the number input and put into variable

					CvtoNum rowA									;convert the ascii value into dec
 00000343  A3 0000094F R		MOV rowA, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colA, 10								;get the number input and put into variable
					CvtoNum colA									;convert the ascii value into dec
 00000368  A3 00000953 R		MOV colA, EAX									;store this in vairiable
					
					INVOKE displayArray, OFFSET arrayA, rowA, colA, ;call the display array method so we have the set of characters in the strdisplay address
					OFFSET strDisplay
					
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for the user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 000003D3  E9 FFFFFC37			JMP getUserChoice								;jump back up to display the menu
 000003D8			choiceD: ;display b
 000003D8  80 3D 00000960 R		CMP matrixBActive, 1							;checks to see if the matrix is active before executing the method
	   01
 000003DF  0F 85 000004C1		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowB, 10								;get the number input and put into variable
					CvtoNum rowB									;convert the ascii value into dec
 00000405  A3 00000957 R		MOV rowB, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colB, 10								;get the number input and put into variable
					CvtoNum colB									;convert the ascii value into dec
 0000042A  A3 0000095B R		MOV colB, EAX									;store this in vairiable
					
					INVOKE displayArray, OFFSET arrayB, rowB, colB,	;call the display array method so we have the set of characters in the strdisplay address
					OFFSET strDisplay
					DisplayString crlf								;display characters to go to next line.	
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 00000495  E9 FFFFFB75			JMP getUserChoice								;jump back up to display the menu							
 0000049A			choiceE: ;add up A
 0000049A  80 3D 0000095F R		CMP matrixAActive, 1							;checks to see if the matrix is active before executing the method
	   01
 000004A1  0F 85 000003FF		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowA, 10								;get the number input and put into variable
					CvtoNum rowA									;convert the ascii value into dec
 000004C7  A3 0000094F R		MOV rowA, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colA, 10								;get the number input and put into variable
					CvtoNum colA									;convert the ascii value into dec
 000004EC  A3 00000953 R		MOV colA, EAX									;store this in vairiable
					
					INVOKE sumUpArray, OFFSET arrayA, rowA, colA	;call the sum up array method which returns the value in eax
 0000050A  A3 00000947 R		MOV tempNum, EAX								;store this into a variable so we dont pass eax as invoke
						
					INVOKE intasc32, addr strDisplay, tempNum		;convert the number into ascii and store into strdisplay

					DisplayString strSum							;display the sum message
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 00000553  E9 FFFFFAB7			JMP getUserChoice								;jump back up to display the menu		
 00000558			choiceF: ;Add up B
 00000558  80 3D 00000960 R		CMP matrixBActive, 1							;checks to see if the matrix is active before executing the method
	   01
 0000055F  0F 85 00000341		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowB, 10								;get the number input and put into variable
					CvtoNum rowB									;convert the ascii value into dec

 00000585  A3 00000957 R		MOV rowB, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colB, 10								;get the number input and put into variable
					CvtoNum colB									;convert the ascii value into dec
 000005AA  A3 0000095B R		MOV colB, EAX									;store this in vairiable
					
					INVOKE sumUpArray, OFFSET arrayB, rowB, colB	;call the sum up array method which returns the value in eax
 000005C8  A3 00000947 R		MOV tempNum, EAX								;store this into a variable so we dont pass eax as invoke
						
					INVOKE intasc32, addr strDisplay, tempNum		;convert the number into ascii and store into strdisplay

					DisplayString strSum							;display the sum message
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter

					DisplayString clearScr							;display the characters to clear the screen
 00000611  E9 FFFFF9F9			JMP getUserChoice								;jump back up to display the menu		
 00000616			choiceG: ;sort and display A
 00000616  80 3D 0000095F R		CMP matrixAActive, 1							;checks to see if the matrix is active before executing the method
	   01
 0000061D  0F 85 00000283		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString strSortLength						;display a string asking how many elements to sort
					PullString numValues, 10						;pull the string the user types in 
					CvtoNum numValues								;convert the ascii number to decimal
 00000643  A3 0000094B R		MOV numValues, EAX								;move eax into a variable so we dont invoke it
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					INVOKE selectionSort, OFFSET arrayA, numValues  ;call the selection sort method to sort the array
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 0000068F  E9 FFFFF97B			JMP getUserChoice								;jump back up to display the menu		
 00000694			choiceH: ;sort and display B
 00000694  80 3D 00000960 R		CMP matrixBActive, 1							;checks to see if the matrix is active before executing the method
	   01
 0000069B  0F 85 00000205		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString strSortLength						;display a string asking how many elements to sort
					PullString numValues, 10						;pull the string the user types in 
					CvtoNum numValues								;convert the ascii number to decimal
 000006C1  A3 0000094B R		MOV numValues, EAX								;move eax into a variable so we dont invoke it
					DisplayString crlf								;display characters to go to next line.
					DisplayString crlf								;display characters to go to next line.
					INVOKE selectionSort, OFFSET arrayB, numValues  ;call the selection sort method to sort the array
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 0000070D  E9 FFFFF8FD			JMP getUserChoice								;jump back up to display the menu			
 00000712			choiceI: ;multiply
 00000712  E9 000001A8			JMP notImplemented								;jump to the not implemented section
 00000717			choiceJ: ;display c
 00000717  E9 000001A3			JMP notImplemented								;jump to the not implemented section
 0000071C			choiceK: ;add up c
 0000071C  E9 0000019E			JMP notImplemented								;jump to the not implemented section
 00000721			choiceL: ;sort c
 00000721  E9 00000199			JMP notImplemented								;jump to the not implemented section
 00000726			choiceM: ;smallest a
 00000726  80 3D 0000095F R		CMP matrixAActive, 1							;checks to see if the matrix is active before executing the method
	   01
 0000072D  0F 85 00000173		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowA, 10								;get the number input and put into variable
					CvtoNum rowA									;convert the ascii value into dec
 00000753  A3 0000094F R		MOV rowA, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colA, 10								;get the number input and put into variable
					CvtoNum colA									;convert the ascii value into dec
 00000778  A3 00000953 R		MOV colA, EAX									;store this in vairiable
					
					INVOKE smallestValue, OFFSET arrayA, rowA, colA	;call the sum up array method which returns the value in eax
 00000796  A3 00000947 R		MOV tempNum, EAX								;store this into a variable so we dont pass eax as invoke
						
					INVOKE intasc32, addr strDisplay, tempNum		;convert the number into ascii and store into strdisplay

					DisplayString strSmallestNum					;display the sum message
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 000007DF  E9 FFFFF82B			JMP getUserChoice								;jump back up to display the menu	
 000007E4			choiceN: ;smallest b
 000007E4  80 3D 00000960 R		CMP matrixBActive, 1							;checks to see if the matrix is active before executing the method
	   01
 000007EB  0F 85 000000B5		JNE lockedMethod								;if it is not active, then jump to display it is locked
					DisplayString enterValRow						;Displays the string asking for the number of rows
					PullString rowB, 10								;get the number input and put into variable
					CvtoNum rowB									;convert the ascii value into dec
 00000811  A3 00000957 R		MOV rowB, EAX									;store this in vairiable
					DisplayString enterValCol						;Displays the string asking for the number of cols
					PullString colB, 10								;get the number input and put into variable
					CvtoNum colB									;convert the ascii value into dec
 00000836  A3 0000095B R		MOV colB, EAX									;store this in vairiable
					
					INVOKE smallestValue, OFFSET arrayB, rowB, colB	;call the sum up array method which returns the value in eax
 00000854  A3 00000947 R		MOV tempNum, EAX								;store this into a variable so we dont pass eax as invoke
						
					INVOKE intasc32, addr strDisplay, tempNum		;convert the number into ascii and store into strdisplay

					DisplayString strSmallestNum					;display the sum message
					DisplayString strDisplay						;display the characters inside ofo the str display vairiable
					DisplayString enterToCont						;display the press enter to continue message
					PullString strEnter, 0							;wait for user to press enter
					DisplayString clearScr							;display the characters to clear the screen
 0000089D  E9 FFFFF76D			JMP getUserChoice								;jump back up to display the menu
 000008A2			choiceO: ;smallest c
 000008A2  EB 1B			JMP notImplemented								;jump to the not implemented section
 000008A4			choiceQ:
 000008A4  EB 32			JMP finished									;Jump to the end of the program, terminate.
					
 000008A6			lockedMethod:
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString strLocked							;show a message telling the user that this method is currently locked
 000008BA  E9 FFFFF750			JMP getUserChoice								;jump back up to display the menu	
 000008BF			notImplemented:
					DisplayString clearScr							;display the characters to clear the screen
					DisplayString strMethodNotAdded					;show a message telling the user that this method has not been implemented
 000008D3  E9 FFFFF737			JMP getUserChoice								;jump back up to display the menu

				;************************************* the instructions below calls for "normal termination"	
 000008D8			finished:
					INVOKE ExitProcess,0						 
					PUBLIC _start
					
 000008DF			main ENDP

					END												;Signals assembler that there are no instructions after this statement
Microsoft (R) Macro Assembler Version 6.11		    10/27/19 14:12:49
proj4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CvtoNum  . . . . . . . . . . . .	Proc
DisplayString  . . . . . . . . .	Proc
PullString . . . . . . . . . . .	Proc
getBytes . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000961 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008DF DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
extractDwords  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 000008DA Public
  getUserChoice  . . . . . . . .	L Near	 0000000F _TEXT	
  choiceA  . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  lpClearA . . . . . . . . . . .	L Near	 000001ED _TEXT	
  choiceB  . . . . . . . . . . .	L Near	 0000027F _TEXT	
  lpClearB . . . . . . . . . . .	L Near	 00000284 _TEXT	
  choiceC  . . . . . . . . . . .	L Near	 00000316 _TEXT	
  choiceD  . . . . . . . . . . .	L Near	 000003D8 _TEXT	
  choiceE  . . . . . . . . . . .	L Near	 0000049A _TEXT	
  choiceF  . . . . . . . . . . .	L Near	 00000558 _TEXT	
  choiceG  . . . . . . . . . . .	L Near	 00000616 _TEXT	
  choiceH  . . . . . . . . . . .	L Near	 00000694 _TEXT	
  choiceI  . . . . . . . . . . .	L Near	 00000712 _TEXT	
  choiceJ  . . . . . . . . . . .	L Near	 00000717 _TEXT	
  choiceK  . . . . . . . . . . .	L Near	 0000071C _TEXT	
  choiceL  . . . . . . . . . . .	L Near	 00000721 _TEXT	
  choiceM  . . . . . . . . . . .	L Near	 00000726 _TEXT	
  choiceN  . . . . . . . . . . .	L Near	 000007E4 _TEXT	
  choiceO  . . . . . . . . . . .	L Near	 000008A2 _TEXT	
  choiceQ  . . . . . . . . . . .	L Near	 000008A4 _TEXT	
  lockedMethod . . . . . . . . .	L Near	 000008A6 _TEXT	
  notImplemented . . . . . . . .	L Near	 000008BF _TEXT	
  finished . . . . . . . . . . .	L Near	 000008D8 _TEXT	
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
selectionSort  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
smallestValue  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumUpArray . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
arrayA . . . . . . . . . . . . .	DWord	 00000626 _DATA	
arrayB . . . . . . . . . . . . .	DWord	 000007B6 _DATA	
choiceASCII  . . . . . . . . . .	Byte	 00000430 _DATA	
clearScr . . . . . . . . . . . .	Byte	 00000273 _DATA	
colA . . . . . . . . . . . . . .	DWord	 00000953 _DATA	
colB . . . . . . . . . . . . . .	DWord	 0000095B _DATA	
crlf . . . . . . . . . . . . . .	Byte	 0000042D _DATA	
enterToCont  . . . . . . . . . .	Byte	 0000031B _DATA	
enterValCol  . . . . . . . . . .	Byte	 00000339 _DATA	
enterValRow  . . . . . . . . . .	Byte	 00000354 _DATA	
matrixAActive  . . . . . . . . .	Byte	 0000095F _DATA	
matrixBActive  . . . . . . . . .	Byte	 00000960 _DATA	
numValues  . . . . . . . . . . .	DWord	 0000094B _DATA	
numbersASCII . . . . . . . . . .	Byte	 000005C1 _DATA	
rowA . . . . . . . . . . . . . .	DWord	 0000094F _DATA	
rowB . . . . . . . . . . . . . .	DWord	 00000957 _DATA	
strAskValues . . . . . . . . . .	Byte	 000002A7 _DATA	
strDisplay . . . . . . . . . . .	DWord	 00000431 _DATA	
strEnter . . . . . . . . . . . .	Byte	 00000946 _DATA	
strLocked  . . . . . . . . . . .	Byte	 00000402 _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 00000172 _DATA	
strMenu  . . . . . . . . . . . .	Byte	 00000061 _DATA	
strMethodNotAdded  . . . . . . .	Byte	 000002FA _DATA	
strProjInfo  . . . . . . . . . .	Byte	 00000000 _DATA	
strSmallestNum . . . . . . . . .	Byte	 0000039A _DATA	
strSortLength  . . . . . . . . .	Byte	 000003C2 _DATA	
strSum . . . . . . . . . . . . .	Byte	 0000036F _DATA	
strTypeChoice  . . . . . . . . .	Byte	 00000284 _DATA	
strValuesStored  . . . . . . . .	Byte	 000002DC _DATA	
tempNum  . . . . . . . . . . . .	DWord	 00000947 _DATA	

	   0 Warnings
	   0 Errors
