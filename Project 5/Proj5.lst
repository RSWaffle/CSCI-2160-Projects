Microsoft (R) Macro Assembler Version 6.11		    11/21/19 01:16:03
proj5.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: Proj5.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:		  Proj 5
				;*  Date:         Created 10/19/2019
				;*  Purpose:      create a Student
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  					;Executes "normal" termination
					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword			;Will convert any D-Word number into ACSII characters
					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  				;Will display ;characters until the NULL character is found
					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword ;Get input from user and convert. 
					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  				;This converts ASCII characters to the dword value
					heapDestroyHarrison PROTO Near32 stdcall								;Destroys the memory allocated by the allocate proc 
					extractWords PROTO Near32 stdcall, StringofChars:dword, ArrayDwords:dword
					putch PROTO Near32 stdcall, bVal:byte
					pausesc   PROTO stdcall													;displays the pause screen message and waits for user to press enter
					myInfo    PROTO stdcall, sName:dword, sSection:dword, sProjNum:dword	;display the info for the project
					getTime	  PROTO Near32 stdcall   										;returns address of time string
					Student_1 PROTO stdcall													;reference to the first constuctor
					Student_2 PROTO stdcall, firstN:dword, lastN:dword						;2nd student constructor
					Student_3 PROTO stdcall, sc:dword										;copy constructor
					Student_setName PROTO stdcall, ths:dword, addrFirst:dword, addrLast:dword
					Student_setAddr PROTO stdcall, ths:dword, inAddr:dword, inZip:dword
					Student_setTestScores PROTO stdcall, ths:dword, t1:word, t2:word, t3:word
					Student_setTest PROTO stdcall, ths:dword, score:word, numTest:word
					Student_getName PROTO stdcall, ths:dword
					Student_getTest PROTO stdcall, ths:dword, numTest:word
					Student_getAddress PROTO stdcall, ths:dword 
					Student_getZip PROTO stdcall, ths:dword
					Student_getStreet PROTO stdcall, ths:dword
					Student_findMax PROTO stdcall, ths:dword
					Student_findMin PROTO stdcall, ths:dword
					Student_calcAvg PROTO stdcall, ths:dword
					Student_studentRecord PROTO stdcall, ths:dword
					Student_equals PROTO stdcall, ths:dword, sc:dword
					Student_setStreet PROTO stdcall, ths:dword, streetAddr:dword
					Student_setZip PROTO stdcall, ths:dword, inZip:dword
					Student_letterGrade PROTO stdcall, ths:dword
					
				;******************************************************************************************
				COMMENT %
				******************************************************************************
				*Name: DisplayString                                                         *
				*Purpose:                                                                    *
				*	The purpose of this macro is to display a set of strings to the console  *
				*                                                                            *
				*Date Created: 10/02/2019                                                    *
				*Date Modified: 10/02/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				DisplayString MACRO String:REQ
					INVOKE putstring, ADDR String    				;;display The string passed in 
				ENDM
				
				COMMENT %
				******************************************************************************
				*Name: PullString                                                            *
				*Purpose:                                                                    *
				*	The purpose is to get information from the user and store into a variable*
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*@param limit:byte                                                           *
				*****************************************************************************%
				PullString MACRO String:REQ, limit:REQ
					INVOKE getstring, ADDR String, limit			;;Take the string input and store it into a variable, max amount of chars typed is sNumChars	
				ENDM
				
				COMMENT %
				******************************************************************************
				*Name: setStudentInfo                                                        *
				*Purpose:                                                                    *
				*	 fills in the information to be able to create a student 				 *
				*                                                                            *
				*Date Created: 11/20/2019                                                    *
				*Date Modified: 11/20/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param testArray:byte                                                       *
				*@param Studentnum:byte                                                      *
				*****************************************************************************%
				setStudentInfo MACRO testArray, studentNum
				LOCAL lpClearB										;make this a unique label	ENDM
				;******************************************************************************************
				.DATA
				strName byte "Ryan Shupe",0
 00000000			strSection byte "CSCI 2160-001",0
 00000000 52 79 61 6E 20	strInfo1 byte 10,09, "    Name: ",0				
	   53 68 75 70 65
	   00
 0000000B 43 53 43 49 20	strInfo2 byte 10,09, " Section: ",0
	   32 31 36 30 2D
	   30 30 31 00
 00000019 0A 09 20 20 20	strInfo3 byte 10,09, " Project: ",0
	   20 4E 61 6D 65
	   3A 20 00
 00000026 0A 09 20 53 65	strPressEnter byte 10, "Press ENTER to continue!",0 	
	   63 74 69 6F 6E
	   3A 20 00
 00000033 0A 09 20 50 72	strAskValues  byte 10, "Enter the scores for 3 tests: ",0
	   6F 6A 65 63 74
	   3A 20 00
 00000040 0A 50 72 65 73	strStudentFName byte 10,"Enter the first name for Student ",0
	   73 20 45 4E 54
	   45 52 20 74 6F
	   20 63 6F 6E 74
	   69 6E 75 65 21
	   00
 0000005A 0A 45 6E 74 65	strStudentLName byte 10,"Enter the last name for Student ",0
	   72 20 74 68 65
	   20 73 63 6F 72
	   65 73 20 66 6F
	   72 20 33 20 74
	   65 73 74 73 3A
	   20 00
 0000007A 0A 45 6E 74 65	strStudentStreet byte 10,"Enter the street for Student ",0
	   72 20 74 68 65
	   20 66 69 72 73
	   74 20 6E 61 6D
	   65 20 66 6F 72
	   20 53 74 75 64
	   65 6E 74 20 00
 0000009D 0A 45 6E 74 65	strStudentZip byte 10,"Enter the 5 digit zip for Student ",0
	   72 20 74 68 65
	   20 6C 61 73 74
	   20 6E 61 6D 65
	   20 66 6F 72 20
	   53 74 75 64 65
	   6E 74 20 00
 000000BF 0A 45 6E 74 65	strAverage byte 10, "The average of the grades is: ", 0
	   72 20 74 68 65
	   20 73 74 72 65
	   65 74 20 66 6F
	   72 20 53 74 75
	   64 65 6E 74 20
	   00
 000000DE 0A 45 6E 74 65	strMaxTest byte 10, "The max grade for the student 1 is: ", 0
	   72 20 74 68 65
	   20 35 20 64 69
	   67 69 74 20 7A
	   69 70 20 66 6F
	   72 20 53 74 75
	   64 65 6E 74 20
	   00
 00000102 0A 54 68 65 20	strMinTest byte 10, "The min grade for the student 2 is: ", 0
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 74 68 65 20
	   67 72 61 64 65
	   73 20 69 73 3A
	   20 00
 00000122 0A 54 68 65 20	strStreet byte 10, "The street for the student 2 is: ", 0
	   6D 61 78 20 67
	   72 61 64 65 20
	   66 6F 72 20 74
	   68 65 20 73 74
	   75 64 65 6E 74
	   20 31 20 69 73
	   3A 20 00
 00000148 0A 54 68 65 20	strZip byte 10, "The zip for student 2 is: ", 0
	   6D 69 6E 20 67
	   72 61 64 65 20
	   66 6F 72 20 74
	   68 65 20 73 74
	   75 64 65 6E 74
	   20 32 20 69 73
	   3A 20 00
 0000016E 0A 54 68 65 20	strLetterGrade byte 10, "The letter grade for the student 1 is: ", 0
	   73 74 72 65 65
	   74 20 66 6F 72
	   20 74 68 65 20
	   73 74 75 64 65
	   6E 74 20 32 20
	   69 73 3A 20 00
 00000191 0A 54 68 65 20	
	   7A 69 70 20 66
	   6F 72 20 73 74
	   75 64 65 6E 74
	   20 32 20 69 73
	   3A 20 00
 000001AD 0A 54 68 65 20	strCol byte ": ", 0		
	   6C 65 74 74 65
	   72 20 67 72 61
	   64 65 20 66 6F
	   72 20 74 68 65
	   20 73 74 75 64
	   65 6E 74 20 31
	   20 69 73 3A 20
	   00
				zipDecimal1 dword 0,0								;memory to hold a decimal zip	
 000001D6 3A 20 00		zipDecimal2 dword 0,0								;memory to hold a decimal zip	
 000001D9 00000000		zipDecimal3 dword 0,0								;memory to hold a decimal zip	
	   00000000
 000001E1 00000000		zipDecimal4 dword 0,0								;memory to hold a decimal zip	
	   00000000
 000001E9 00000000		strAsciiChar byte 0									;memory to hold 1 ascii char
	   00000000
 000001F1 00000000		ALIGN
	   00000000
 000001F9 00			crlf byte  10," ",0									;Null-terminated string to skip to new line
				strEmpty byte 0
 000001FC 0A 20 00		tempNum dword 0
 000001FF 00			strTemp byte 0										;a temp byte in memory for getstring
 00000200 00000000		strProj byte 4 dup(0), 10 							;memory to hold the project number
 00000204 00			testArray word 50 dup (?),00						;memory to hold dwords in an array
 00000205  00000004 [		numbersASCII byte 50 dup (?), 00					;memory to hold the ascii numbers
	    00
	   ] 0A
 0000020A  00000032 [		strTempF byte 100 dup (0),00						;memory that can hold a first name
	    0000
	   ] 0000
 00000270  00000032 [		strTempL byte 100 dup (0),00						;memory that can hold a last name
	    00
	   ] 00
 000002A3  00000064 [		strTempStreet byte 200 dup (0),00					;memory that can hold a street
	    00
	   ] 00
 00000308  00000064 [		strTempZip byte 5 dup (0),00						;memory that can hold a zip	
	    00
	   ] 00
 0000036D  000000C8 [		
	    00
	   ] 00
 00000436  00000005 [		s1 dword ?											;reference variable for student 1
	    00
	   ] 00
				s2 dword ?											;reference variable for student 2
 0000043C 00000000		s3 dword ?											;reference variable for student 3
 00000440 00000000		s4 dword ?											;reference variable for student 4
 00000444 00000000		;******************************************************************************************
 00000448 00000000		.CODE
				
 00000000			_start:
					MOV EAX, 0												;Statement to help in debugging
 00000000			
 00000000  B8 00000000		main PROC
					INVOKE myInfo, addr strName, addr strSection, 5 		;display the student information, section, time, and project number. 
 00000005 00000005			DisplayString crlf								 		;skip to a new line.
					DisplayString strStudentFName							;display string showing students first name
					INVOKE intasc32, addr strAsciiChar, 1  					;convert the student number to ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempF, 100								;get what the user typed and store into strTempF
					DisplayString strStudentLName							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 1  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempL, 100								;get what the user typed and store into strTempL	
					DisplayString strStudentStreet							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 1  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempStreet, 200							;get what the user typed and store into strTempL
					DisplayString strStudentZip								;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 1  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
					MOV zipDecimal1, EAX									;moves the decimal zip into dword 
					MOV ECX, lengthof testArray 							;moves the length of array a into ECX so we can clear that amount to clear the array
 00000105  A3 000001D9 R		lpClearB1:
 0000010A  B9 00000033				MOV testArray [ECX], 0								;sets the byte at position ecx to 0 (this will exclude the first byte but thats ok because its going to be overwritten)
 0000010F				loop lpClearB1											;decrement ECX and go to the top of the loop
 0000010F  66| C7 81			DisplayString strAskValues								;display the string asking which values to store
	   0000020A R
	   0000
 00000118  E2 F5			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
					
					INVOKE Student_1										;create the student 1 object
					MOV s1, EAX												;move the address of the student into s1
					INVOKE Student_setName, s1, addr strTempF, addr strTempL;sets the student name cooresponding to the names passed in
 00000144  A3 0000043C R		INVOKE Student_setAddr, s1, addr strTempStreet, addr zipDecimal1
					MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can refernce the positions
					INVOKE Student_setTestScores, s1, word ptr [EDX], 		;sets the test scores for the student.
 00000173  BA 0000020A R		word ptr [EDX + 2], word ptr [EDX + 4]
					
					DisplayString crlf										;skip to a new line.
				 
					DisplayString strStudentFName							;display string showing students first name
					INVOKE intasc32, addr strAsciiChar, 2  					;convert the student number to ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempF, 100								;get what the user typed and store into strTempF
					DisplayString strStudentLName							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 2  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempL, 100								;get what the user typed and store into strTempL	
					DisplayString strStudentStreet							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 2  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempStreet, 200							;get what the user typed and store into strTempL
					DisplayString strStudentZip								;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 2  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
					MOV zipDecimal2, EAX									;moves the decimal zip into dword 
					MOV ECX, lengthof testArray 							;moves the length of array a into ECX so we can clear that amount to clear the array
 00000286  A3 000001E1 R		lpClearB2:
 0000028B  B9 00000033				MOV testArray [ECX], 0								;sets the byte at position ecx to 0 (this will exclude the first byte but thats ok because its going to be overwritten)
 00000290				loop lpClearB2											;decrement ECX and go to the top of the loop
 00000290  66| C7 81			DisplayString strAskValues								;display the string asking which values to store
	   0000020A R
	   0000
 00000299  E2 F5			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
					
					INVOKE Student_2, addr strTempF, addr strTempL			;create the student 2 object passing in the name provided
					MOV s2, EAX												;move the address of the student into s1
					INVOKE Student_setAddr, s2, addr strTempStreet, addr zipDecimal2
 000002CF  A3 00000440 R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can refernce the positions
					INVOKE Student_setTest, s2, word ptr [EDX], 1			;sets the first test score
 000002E9  BA 0000020A R		INVOKE Student_setTest, s2, word ptr [EDX + 2], 2		;sets the second test score
					INVOKE Student_setTest, s2, word ptr [EDX + 4], 3		;sets the third test score
					
					DisplayString crlf										;skip to a new line.
					DisplayString strStudentFName							;display string showing students first name
					INVOKE intasc32, addr strAsciiChar, 3  					;convert the student number to ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempF, 100								;get what the user typed and store into strTempF
					DisplayString strStudentLName							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 3  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempL, 100								;get what the user typed and store into strTempL
					DisplayString strStudentStreet							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 3  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempStreet, 200							;get what the user typed and store into strTempL
					DisplayString strStudentZip								;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, 3  					;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
					MOV zipDecimal3, EAX									;moves the decimal zip into dword 
					MOV ECX, lengthof testArray 							;moves the length of array a into ECX so we can clear that amount to clear the array
 00000418  A3 000001E9 R		lpClearB3:
 0000041D  B9 00000033				MOV testArray [ECX], 0								;sets the byte at position ecx to 0 (this will exclude the first byte but thats ok because its going to be overwritten)
 00000422				loop lpClearB3											;decrement ECX and go to the top of the loop
 00000422  66| C7 81			DisplayString strAskValues								;display the string asking which values to store
	   0000020A R
	   0000
 0000042B  E2 F5			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
					DisplayString crlf										;skip to a new line.
					
					INVOKE Student_2, addr strTempF, addr strTempL			;create the student 2 object passing in the name provided
					MOV s3, EAX												;move the address of the student into s3
					INVOKE Student_setAddr, s3, addr strTempStreet, addr zipDecimal3
 0000046B  A3 00000444 R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can refernce the positions
					INVOKE Student_setTestScores, s3, word ptr [EDX], 		;sets the test scores for the student
 00000485  BA 0000020A R		word ptr [EDX + 2], word ptr [EDX + 4]
					
					INVOKE Student_3, s1									;creates a copy of student 1
					MOV s4, EAX												;moves the address into s4
					
 000004B4  A3 00000448 R		INVOKE Student_studentRecord, s1						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s2						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s3						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s4						;gather the student record for the student
					DisplayString [EAX]										;display the students information
						
					INVOKE pausesc											;press enter to continue
					
				; //1. Display s2’s test average with an appropriate message.
					DisplayString crlf										;skip to new line
					DisplayString strAverage								;display average is string
					INVOKE Student_calcAvg, s1								;gets the students average in AX
					CWDE													;convert to eax
					INVOKE intasc32, addr tempNum, EAX						;convert the average into ascii
 00000529  98				DisplayString tempNum									;displays the test score
					
				; //2. Display s1’s 2nd test score, then display his first score, then display his 3rd score.
					DisplayString crlf								 		;skip to a new line.
					INVOKE Student_getTest, s1, 2							;gets the 2nd test score into AX
					CWDE													;convert to eax	
					DisplayString crlf										;skip to new line	
 00000556  98				INVOKE intasc32, addr numbersASCII, EAX					;converts it to ascii
					DisplayString numbersASCII								;displays the test score
					INVOKE Student_getTest, s1, 1							;gets the first test score into AX
					CWDE													;convert to eax				
					DisplayString crlf										;skip to new line	
 00000583  98				INVOKE intasc32, addr numbersASCII, EAX					;converts it to ascii
					DisplayString numbersASCII								;displays the average
					INVOKE Student_getTest, s1, 3							;gets the test score into AX
					CWDE													;convert to eax
					DisplayString crlf										;skip to new line	;
 000005B0  98				INVOKE intasc32, addr numbersASCII, EAX					;converts it to ascii
					DisplayString numbersASCII								;displays the test score
					
				; //3. pause
					INVOKE pausesc											;press enter to continue
					
				; //4. Attempt to change s1’s 4th test score to 70. 
					INVOKE Student_setTest, s1, 70, 4						;attempts to change the 4th test score to 70
					
				; //5. Attempt to Change s1’s 2nd test score to -65
					INVOKE Student_setTest, s1, -65, 2						;attemps to set the 2ns test to -65
					
				; //6. Display s1’s 2nd test score. If your setter worked correctly, it should not have changed
					INVOKE Student_getTest, s1, 2							;get the 2nd test from the student in ax
					CWDE													;convert AX into EAX
					INVOKE intasc32, addr numbersASCII, EAX					;convert the test number into ascii
 00000600  98				DisplayString crlf										;skip to new line
					DisplayString numbersASCII								;display the test
					
				; //7. Change s1’s name to NOTHING, that is the empty string.
					;INVOKE Student_setName, s1, strEmpty, strEmpty 
					
				; //8. Display s1’s name. It should still be the same
					;INVOKE Student_getName, s1
					;MOV dword ptr numbersASCII, EAX
					;DisplayString numbersASCII
					
				; //9. pause
					INVOKE pausesc											;press enter to continue
					
				; //10. Display s1's highest test score with an appropriate message
					DisplayString strMaxTest								;display max test message
					INVOKE Student_findMax, s1								;get the students max test size into ax
					CWDE													;convert AX into EAX
					INVOKE intasc32, addr numbersASCII, EAX					;convert the test number into ascii
 0000063A  98				DisplayString numbersASCII								;display the test
					DisplayString crlf										;skip to new line	
					
				; //11. Display s2’s lowest test score with an appropriate message.
					DisplayString strMinTest								;display min test message
					INVOKE Student_findMin, s2								;get the students min test size into ax
					CWDE													;convert AX into EAX
					INVOKE intasc32, addr numbersASCII, EAX					;convert the test number into ascii
 0000066F  98				DisplayString numbersASCII								;display the test
					DisplayString crlf										;skip to new line
					
				; //12. Display s1’s lettergrade with an appropriate message.
					DisplayString strLetterGrade							;display letter grade message
					INVOKE Student_letterGrade, s1							;call the letter grade method to get the letter grade
					INVOKE putch, AL
					DisplayString crlf										;skip to new line
					
				; //13. Display the name in the Student object ref by s1
				; //14. pause
					INVOKE pausesc											;press enter to continue
					
				; //15. Display s1’s name and address using ONE method
				
				; //16. Display the street that s2 lives on with an appropriate message.
					DisplayString strStreet									;display street message
					INVOKE Student_getStreet, s2							;get the street address
					MOV tempNum, EAX
					INVOKE putstring, tempNum
 000006CE  A3 00000200 R		
					
				; //17. Display the City that s2 lives in with an appropriate message.
					;???????	DOES NOT EXIST									
					
				; //18. Display the State that s2 lives in with an appropriate message.
					;???????	DOES NOT EXIST							
					
				; //19. Display the Zip Code for s2 with an appropriate message.	
					DisplayString strZip									;display street message
					INVOKE Student_getZip, s2	
					MOV tempNum, EAX										;moves the zip into eax
					INVOKE intasc32, addr strAsciiChar, addr tempNum
 000006F3  A3 00000200 R		DisplayString tempNum									;display the street from the stored address
					
				; //20. pause
					INVOKE pausesc											;press enter to continue
				
					
				;************************************* the instructions below calls for "normal termination"	
				finished:
					INVOKE heapDestroyHarrison						;clears the memory used by heap allocharrion
 00000716				INVOKE ExitProcess,0						 
					PUBLIC _start
					
				main ENDP
				
 00000722			COMMENT%
				******************************************************************************
				*Name: pausesc                                                               *
				*Purpose:                                                                    *
				*	  When invoked, displays a message press enter to continue. When the user* 
				*		presses enter, the program returns 									 *
				*Date Created: 11/15/2019                                                    *
				*Date Modified: 11/15/2019                                                   *
				*                                                                            *
				*****************************************************************************%
				pausesc PROC stdcall
				LOCAL bbyte:byte
 00000722				INVOKE putstring, addr strPressEnter					;display the press enter to continue message
					INVOKE getstring, addr strTemp, 0						;wait for the user to press enter
				RET 														;return to where i was called.
				pausesc ENDP
				
 00000740			COMMENT%
				******************************************************************************
				*Name: myInfo                                                                *
				*Purpose:                                                                    *
				*	  Accepts a name and a section number and displays info to the screen    *
				*		accordingly 														 *
				*Date Created: 11/15/2019                                                    *
				*Date Modified: 11/15/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param nameAddr:dword                                                       *
				*@param sSectionAddr:dword	                                                 *
				*****************************************************************************%
				myInfo PROC stdcall, sName:dword, sSection:dword, sProjNum:dword
				LOCAL bbyte:byte
 00000740			INVOKE putstring, addr strInfo1						;display the first part of the info screen
				INVOKE putstring, sName								;display the provided name
				INVOKE putstring, addr strInfo2						;display the second part of the info screen
				INVOKE putstring, sSection							;display the provided section
				INVOKE putstring, addr strInfo3						;display the third part of the info screen
				INVOKE intasc32, addr strProj, sProjNum				;convert the decimal number into ascii
				INVOKE putstring, addr strProj						;display the project number
				INVOKE getTime										;call the get time method to get the current system time and construct a string
				INVOKE putstring, EAX								;display the current time thats address is in eax
				RET													;return to where i was called from
				myInfo ENDP
				
 0000079A				END												;Signals assembler that there are no instructions after this statement
Microsoft (R) Macro Assembler Version 6.11		    11/21/19 01:16:03
proj5.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

DisplayString  . . . . . . . . .	Proc
PullString . . . . . . . . . . .	Proc
setStudentInfo . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000044C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000079A DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_1  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_3  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_calcAvg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_equals . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_findMax  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_findMin  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getAddress . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getName  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getStreet  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getTest  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getZip . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_letterGrade  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setAddr  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setName  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setStreet  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setTestScores  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setTest  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setZip . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_studentRecord  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
extractWords . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getTime  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
heapDestroyHarrison  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 0000071D Public
  lpClearB1  . . . . . . . . . .	L Near	 0000010F _TEXT	
  lpClearB2  . . . . . . . . . .	L Near	 00000290 _TEXT	
  lpClearB3  . . . . . . . . . .	L Near	 00000422 _TEXT	
  finished . . . . . . . . . . .	L Near	 00000716 _TEXT	
myInfo . . . . . . . . . . . . .	P Near	 00000740 _TEXT	Length= 0000005A Public STDCALL
  sName  . . . . . . . . . . . .	DWord	 bp + 00000008
  sSection . . . . . . . . . . .	DWord	 bp + 0000000C
  sProjNum . . . . . . . . . . .	DWord	 bp + 00000010
  bbyte  . . . . . . . . . . . .	Byte	 bp - 00000001
pausesc  . . . . . . . . . . . .	P Near	 00000722 _TEXT	Length= 0000001E Public STDCALL
  bbyte  . . . . . . . . . . . .	Byte	 bp - 00000001
putch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
crlf . . . . . . . . . . . . . .	Byte	 000001FC _DATA	
numbersASCII . . . . . . . . . .	Byte	 00000270 _DATA	
s1 . . . . . . . . . . . . . . .	DWord	 0000043C _DATA	
s2 . . . . . . . . . . . . . . .	DWord	 00000440 _DATA	
s3 . . . . . . . . . . . . . . .	DWord	 00000444 _DATA	
s4 . . . . . . . . . . . . . . .	DWord	 00000448 _DATA	
strAsciiChar . . . . . . . . . .	Byte	 000001F9 _DATA	
strAskValues . . . . . . . . . .	Byte	 0000005A _DATA	
strAverage . . . . . . . . . . .	Byte	 00000102 _DATA	
strCol . . . . . . . . . . . . .	Byte	 000001D6 _DATA	
strEmpty . . . . . . . . . . . .	Byte	 000001FF _DATA	
strInfo1 . . . . . . . . . . . .	Byte	 00000019 _DATA	
strInfo2 . . . . . . . . . . . .	Byte	 00000026 _DATA	
strInfo3 . . . . . . . . . . . .	Byte	 00000033 _DATA	
strLetterGrade . . . . . . . . .	Byte	 000001AD _DATA	
strMaxTest . . . . . . . . . . .	Byte	 00000122 _DATA	
strMinTest . . . . . . . . . . .	Byte	 00000148 _DATA	
strName  . . . . . . . . . . . .	Byte	 00000000 _DATA	
strPressEnter  . . . . . . . . .	Byte	 00000040 _DATA	
strProj  . . . . . . . . . . . .	Byte	 00000205 _DATA	
strSection . . . . . . . . . . .	Byte	 0000000B _DATA	
strStreet  . . . . . . . . . . .	Byte	 0000016E _DATA	
strStudentFName  . . . . . . . .	Byte	 0000007A _DATA	
strStudentLName  . . . . . . . .	Byte	 0000009D _DATA	
strStudentStreet . . . . . . . .	Byte	 000000BF _DATA	
strStudentZip  . . . . . . . . .	Byte	 000000DE _DATA	
strTempF . . . . . . . . . . . .	Byte	 000002A3 _DATA	
strTempL . . . . . . . . . . . .	Byte	 00000308 _DATA	
strTempStreet  . . . . . . . . .	Byte	 0000036D _DATA	
strTempZip . . . . . . . . . . .	Byte	 00000436 _DATA	
strTemp  . . . . . . . . . . . .	Byte	 00000204 _DATA	
strZip . . . . . . . . . . . . .	Byte	 00000191 _DATA	
tempNum  . . . . . . . . . . . .	DWord	 00000200 _DATA	
testArray  . . . . . . . . . . .	Word	 0000020A _DATA	
zipDecimal1  . . . . . . . . . .	DWord	 000001D9 _DATA	
zipDecimal2  . . . . . . . . . .	DWord	 000001E1 _DATA	
zipDecimal3  . . . . . . . . . .	DWord	 000001E9 _DATA	
zipDecimal4  . . . . . . . . . .	DWord	 000001F1 _DATA	

	   0 Warnings
	   0 Errors
