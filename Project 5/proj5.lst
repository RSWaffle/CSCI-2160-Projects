<<<<<<< HEAD:Project 5/Proj5.lst
Microsoft (R) Macro Assembler Version 6.11		    11/26/19 14:48:36
=======
Microsoft (R) Macro Assembler Version 6.11		    11/23/19 19:00:29
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
proj5.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: Proj5.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:		  Proj 5
				;*  Date:         Created 10/19/2019
				;*  Purpose:      create a Student
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  						;Executes "normal" termination
					intasc32 PROTO NEAR32 stdcall, lpStringToHold:dword, dval:dword				;Will convert any D-Word number into ACSII characters
					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword  					;Will display ;characters until the NULL character is found
					getstring 	PROTO stdcall, lpStringToHoldInput:dword, maxNumChars:dword 	;Get input from user and convert. 
					ascint32 PROTO NEAR32 stdcall, lpStringToConvert:dword  					;This converts ASCII characters to the dword value
					heapDestroyHarrison PROTO Near32 stdcall									;Destroys the memory allocated by the allocate proc 
					extractWords PROTO Near32 stdcall, StringofChars:dword, ArrayDwords:dword	;extracts words from a string and stores into an array
					putch PROTO Near32 stdcall, bVal:byte										;puts a char onto the screen
					pausesc   PROTO stdcall														;displays the pause screen message and waits for user to press enter
<<<<<<< HEAD:Project 5/Proj5.lst
					myInfo    PROTO stdcall, sName:dword, sSection:dword, sProjNum:dword, sTime:dword;display the info for the project
=======
					myInfo    PROTO stdcall, sName:dword, sSection:dword, sProjNum:dword		;display the info for the project
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					getTime	  PROTO Near32 stdcall   											;returns address of time string
					Student_1 PROTO stdcall														;reference to the first constuctor
					Student_2 PROTO stdcall, firstN:dword, lastN:dword							;2nd student constructor
					Student_3 PROTO stdcall, sc:dword											;copy constructor
					Student_setName PROTO stdcall, ths:dword, addrFirst:dword, addrLast:dword	;sets the name of a student
					Student_setAddr PROTO stdcall, ths:dword, inAddr:dword, inZip:dword			;sets the address of a student
					Student_setTestScores PROTO stdcall, ths:dword, t1:word, t2:word, t3:word	;sets all of the test scoroes of the student
					Student_setTest PROTO stdcall, ths:dword, score:word, numTest:word			;sets a specific test score
					Student_getName PROTO stdcall, ths:dword									;gets the name of the student with address in eax
					Student_getTest PROTO stdcall, ths:dword, numTest:word						;gets the test of a student returns in ax
					Student_getAddress PROTO stdcall, ths:dword 								;returns the address of the student address in eax
					Student_getZip PROTO stdcall, ths:dword										;gets the zip code of the student returns in eax
					Student_getStreet PROTO stdcall, ths:dword									;gets the street of the student, returning address in eax
					Student_findMax PROTO stdcall, ths:dword									;returns the max test grade
					Student_findMin PROTO stdcall, ths:dword									;returns the lowest test grade
					Student_calcAvg PROTO stdcall, ths:dword									;calculates the average test grade of a student passed in
					Student_studentRecord PROTO stdcall, ths:dword								;returns a address pointing to a ascii string of the student
					Student_equals PROTO stdcall, ths:dword, sc:dword							;returns 1 if equal, 0 if not. 
					Student_setStreet PROTO stdcall, ths:dword, streetAddr:dword				;sets the street of a student
					Student_setZip PROTO stdcall, ths:dword, inZip:dword						;sets the zip code foro a student
					Student_letterGrade PROTO stdcall, ths:dword								;returns the ascii letter grade in AL
					Student_BasicInfo PROTO stdcall, ths:dword									;returns the name and address, address in eax
					
				;******************************************************************************************
				COMMENT %
				******************************************************************************
				*Name: DisplayString                                                         *
				*Purpose:                                                                    *
				*	The purpose of this macro is to display a set of strings to the console  *
				*                                                                            *
				*Date Created: 10/02/2019                                                    *
				*Date Modified: 10/02/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				DisplayString MACRO String:REQ
					INVOKE putstring, ADDR String    				;;display The string passed in 
				ENDM
				
				COMMENT %
				******************************************************************************
				*Name: PullString                                                            *
				*Purpose:                                                                    *
				*	The purpose is to get information from the user and store into a variable*
				*                                                                            *
				*Date Created: 10/09/2019                                                    *
				*Date Modified: 10/09/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*@param limit:byte                                                           *
				*****************************************************************************%
				PullString MACRO String:REQ, limit:REQ
					INVOKE getstring, ADDR String, limit			;;Take the string input and store it into a variable, max amount of chars typed is sNumChars	
				ENDM
				
				COMMENT %
				******************************************************************************
				*Name: setStudentInfo                                                        *
				*Purpose:                                                                    *
				*	 fills in the information to be able to create a student 				 *
				*                                                                            *
				*Date Created: 11/20/2019                                                    *
				*Date Modified: 11/20/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param testArray:byte                                                       *
				*@param Studentnum:byte                                                      *
				*****************************************************************************%
				setStudentInfo MACRO testArray, studentNum
					MOV EAX, 0												;clear out eax	DisplayString strStudentFName							;display string showing students first name
					INVOKE intasc32, addr strAsciiChar, studentNum  		;convert the student number to ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempF, 100								;get what the user typed and store into strTempF
					DisplayString strStudentLName							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, studentNum  		;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempL, 100								;get what the user typed and store into strTempL	
					DisplayString strStudentStreet							;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, studentNum  		;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
					PullString strTempStreet, 200							;get what the user typed and store into strTempL
					DisplayString strStudentZip								;ask for the students last name
					INVOKE intasc32, addr strAsciiChar, studentNum  		;convert the student number into ascii
					DisplayString strAsciiChar								;display the string showing the student number
					DisplayString strCol									;display the string :
						ENDM
				;******************************************************************************************
				.DATA
				strName byte "Ryan Shupe",0
				strSection byte "CSCI 2160-001",0
 00000000			strInfo1 byte 10,09, "    Name: ",0				
 00000000 52 79 61 6E 20	strInfo2 byte 10,09, " Section: ",0
	   53 68 75 70 65
	   00
 0000000B 43 53 43 49 20	strInfo3 byte 10,09, " Project: ",0
	   32 31 36 30 2D
	   30 30 31 00
 00000019 0A 09 20 20 20	strPressEnter byte 10, "Press ENTER to continue!",0 	
	   20 4E 61 6D 65
	   3A 20 00
 00000026 0A 09 20 53 65	strAskValues  byte 10, "Enter the scores for 3 tests: ",0
	   63 74 69 6F 6E
	   3A 20 00
 00000033 0A 09 20 50 72	strStudentFName byte 10,10,"Enter the first name for Student ",0
	   6F 6A 65 63 74
	   3A 20 00
 00000040 0A 50 72 65 73	strStudentLName byte 10,"Enter the last name for Student ",0
	   73 20 45 4E 54
	   45 52 20 74 6F
	   20 63 6F 6E 74
	   69 6E 75 65 21
	   00
 0000005A 0A 45 6E 74 65	strStudentStreet byte 10,"Enter the street for Student ",0
	   72 20 74 68 65
	   20 73 63 6F 72
	   65 73 20 66 6F
	   72 20 33 20 74
	   65 73 74 73 3A
	   20 00
 0000007A 0A 0A 45 6E 74	strStudentZip byte 10,"Enter the 5 digit zip for Student ",0
	   65 72 20 74 68
	   65 20 66 69 72
	   73 74 20 6E 61
	   6D 65 20 66 6F
	   72 20 53 74 75
	   64 65 6E 74 20
	   00
 0000009E 0A 45 6E 74 65	strAverage byte 10, "The average of the grades for student 2 is: ", 0
	   72 20 74 68 65
	   20 6C 61 73 74
	   20 6E 61 6D 65
	   20 66 6F 72 20
	   53 74 75 64 65
	   6E 74 20 00
 000000C0 0A 45 6E 74 65	strMaxTest byte 10, "The max grade for the student 1 is: ", 0
	   72 20 74 68 65
	   20 73 74 72 65
	   65 74 20 66 6F
	   72 20 53 74 75
	   64 65 6E 74 20
	   00
 000000DF 0A 45 6E 74 65	strMinTest byte 10, "The min grade for the student 2 is: ", 0
	   72 20 74 68 65
	   20 35 20 64 69
	   67 69 74 20 7A
	   69 70 20 66 6F
	   72 20 53 74 75
	   64 65 6E 74 20
	   00
 00000103 0A 54 68 65 20	strStreet byte 10, "The street for the student 2 is: ", 0
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 74 68 65 20
	   67 72 61 64 65
	   73 20 66 6F 72
	   20 73 74 75 64
	   65 6E 74 20 32
	   20 69 73 3A 20
	   00
 00000131 0A 54 68 65 20	strZip byte 10, "The zip for student 2 is: ", 0
	   6D 61 78 20 67
	   72 61 64 65 20
	   66 6F 72 20 74
	   68 65 20 73 74
	   75 64 65 6E 74
	   20 31 20 69 73
	   3A 20 00
 00000157 0A 54 68 65 20	strLetterGrade byte 10, "The letter grade for the student 1 is: ", 0
	   6D 69 6E 20 67
	   72 61 64 65 20
	   66 6F 72 20 74
	   68 65 20 73 74
	   75 64 65 6E 74
	   20 32 20 69 73
	   3A 20 00
 0000017D 0A 54 68 65 20	strEqual byte 10, "The students are equal.", 0
	   73 74 72 65 65
	   74 20 66 6F 72
	   20 74 68 65 20
	   73 74 75 64 65
	   6E 74 20 32 20
	   69 73 3A 20 00
 000001A0 0A 54 68 65 20	strNotEqual byte 10, "The students are NOT equal", 0
	   7A 69 70 20 66
	   6F 72 20 73 74
	   75 64 65 6E 74
	   20 32 20 69 73
	   3A 20 00
 000001BC 0A 54 68 65 20	
	   6C 65 74 74 65
	   72 20 67 72 61
	   64 65 20 66 6F
	   72 20 74 68 65
	   20 73 74 75 64
	   65 6E 74 20 31
	   20 69 73 3A 20
	   00
 000001E5 0A 54 68 65 20	strCol byte ": ", 0		
	   73 74 75 64 65
	   6E 74 73 20 61
	   72 65 20 65 71
	   75 61 6C 2E 00
 000001FE 0A 54 68 65 20	zipDecimal1 dword 0,0								;memory to hold a decimal zip	
	   73 74 75 64 65
	   6E 74 73 20 61
	   72 65 20 4E 4F
	   54 20 65 71 75
	   61 6C 00
				zipDecimal2 dword 0,0								;memory to hold a decimal zip	
 0000021A 3A 20 00		zipDecimal3 dword 0,0								;memory to hold a decimal zip	
 0000021D 00000000		zipDecimal4 dword 0,0								;memory to hold a decimal zip	
	   00000000
 00000225 00000000		strAsciiChar byte 0									;memory to hold 1 ascii char
	   00000000
<<<<<<< HEAD:Project 5/Proj5.lst
 0000022D 00000000		strTime dword 0
	   00000000
 00000235 00000000		
	   00000000
 0000023D 00			strEmpty byte 00									;null terminated string 
 0000023E 00000000		tempNum dword 0										;temp dword that can be manipulated for calculation
				strTemp byte 0										;a temp byte in memory for getstring
 00000242 00			strProj byte 4 dup(0), 10 							;memory to hold the project number
 00000243 00000000		testArray word 50 dup (?),00						;memory to hold dwords in an array
 00000247 00			numbersASCII byte 50 dup (?), 00					;memory to hold the ascii numbers
 00000248  00000004 [		strTempF byte 100 dup (0),00						;memory that can hold a first name
	    00
	   ] 0A
 0000024D  00000032 [		strTempL byte 100 dup (0),00						;memory that can hold a last name
	    0000
	   ] 0000
 000002B3  00000032 [		strTempStreet byte 200 dup (0),00					;memory that can hold a street
	    00
	   ] 00
 000002E6  00000064 [		strTempZip byte 5 dup (0),00						;memory that can hold a zip	
	    00
	   ] 00
 0000034B  00000064 [		
	    00
	   ] 00
 000003B0  000000C8 [		s1 dword ?											;reference variable for student 1
	    00
	   ] 00
 00000479  00000005 [		s2 dword ?											;reference variable for student 2
	    00
	   ] 00
				s3 dword ?											;reference variable for student 3
 0000047F 00000000		s4 dword ?											;reference variable for student 4
 00000483 00000000		;******************************************************************************************
 00000487 00000000		.CODE
 0000048B 00000000		
=======
 0000022D 00000000		
	   00000000
 00000235 00000000		strEmpty byte 00									;null terminated string 
	   00000000
 0000023D 00			tempNum dword 0										;temp dword that can be manipulated for calculation
				strTemp byte 0										;a temp byte in memory for getstring
 0000023E 00			strProj byte 4 dup(0), 10 							;memory to hold the project number
 0000023F 00000000		testArray word 50 dup (?),00						;memory to hold dwords in an array
 00000243 00			numbersASCII byte 50 dup (?), 00					;memory to hold the ascii numbers
 00000244  00000004 [		strTempF byte 100 dup (0),00						;memory that can hold a first name
	    00
	   ] 0A
 00000249  00000032 [		strTempL byte 100 dup (0),00						;memory that can hold a last name
	    0000
	   ] 0000
 000002AF  00000032 [		strTempStreet byte 200 dup (0),00					;memory that can hold a street
	    00
	   ] 00
 000002E2  00000064 [		strTempZip byte 5 dup (0),00						;memory that can hold a zip	
	    00
	   ] 00
 00000347  00000064 [		
	    00
	   ] 00
 000003AC  000000C8 [		s1 dword ?											;reference variable for student 1
	    00
	   ] 00
 00000475  00000005 [		s2 dword ?											;reference variable for student 2
	    00
	   ] 00
				s3 dword ?											;reference variable for student 3
 0000047B 00000000		s4 dword ?											;reference variable for student 4
 0000047F 00000000		;******************************************************************************************
 00000483 00000000		.CODE
 00000487 00000000		
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				_start:
 00000000				MOV EAX, 0												;Statement to help in debugging
				
 00000000			main PROC
<<<<<<< HEAD:Project 5/Proj5.lst
 00000000  B8 00000000			INVOKE getTime											;call the get time method to get the current system time and construct a string
					MOV strTime, EAX										;display the current time thats address is in eax
 00000005 00000005			INVOKE myInfo, addr strName, addr strSection, 5 , 
					addr strTime											;display the student information, section, time, and project number with the time. 
 0000000A  A3 0000023E R		
					;student1
=======
 00000000  B8 00000000			INVOKE myInfo, addr strName, addr strSection, 5 		;display the student information, section, time, and project number. 
					
 00000005 00000005			;student1
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					setStudentInfo testArray, 1								;gets basic information for a student
					MOV EAX, 0												;initialize the zip code to 0, so it doesnt pull a random value if the user enters nothing
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
<<<<<<< HEAD:Project 5/Proj5.lst
 00000025  B8 00000000	     1		MOV EAX, 0												;clear out eax
 000000F9  B8 00000000			MOV zipDecimal1, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 00000114  A3 0000021D R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 00000119  B8 0000024D R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 0000011E  66| C7 00 0000		
 00000123  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 00000129  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
=======
 00000016  B8 00000000	     1		MOV EAX, 0												;clear out eax
 000000EA  B8 00000000			MOV zipDecimal1, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 00000105  A3 0000021D R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 0000010A  B8 00000249 R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 0000010F  66| C7 00 0000		
 00000114  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 0000011A  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
						
<<<<<<< HEAD:Project 5/Proj5.lst
					INVOKE Student_1										;create the student 1 object
					MOV s1, EAX												;move the address of the student into s1
					INVOKE Student_setName, s1, addr strTempF, addr strTempL;sets the student name corresponding to the names passed in
					INVOKE Student_setAddr, s1, addr strTempStreet, 		;sets the address for the student corresponding to what the user typed in
 00000159  A3 0000047F R		addr zipDecimal1
					MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can reference the positions
					INVOKE Student_setTestScores, s1, word ptr [EDX], 		;sets the test scores for the student.
					word ptr [EDX + 2], word ptr [EDX + 4]
 00000188  BA 0000024D R		
=======
	INVOKE Student_1										;create the student 1 object
					MOV s1, EAX												;move the address of the student into s1
					INVOKE Student_setName, s1, addr strTempF, addr strTempL;sets the student name corresponding to the names passed in
					INVOKE Student_setAddr, s1, addr strTempStreet, 		;sets the address for the student corresponding to what the user typed in
 0000014A  A3 0000047B R		addr zipDecimal1
					MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can reference the positions
					INVOKE Student_setTestScores, s1, word ptr [EDX], 		;sets the test scores for the student.
					word ptr [EDX + 2], word ptr [EDX + 4]
 00000179  BA 00000249 R		
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					;student2
					setStudentInfo testArray, 2								;gets the basic student info for the second student
					MOV EAX, 0												;initialize the zip code to 0, so it doesnt pull a random value if the user enters nothing
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
<<<<<<< HEAD:Project 5/Proj5.lst
 000001AC  B8 00000000	     1		MOV EAX, 0												;clear out eax
 00000280  B8 00000000			MOV zipDecimal2, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 0000029B  A3 00000225 R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 000002A0  B8 0000024D R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 000002A5  66| C7 00 0000		
 000002AA  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 000002B0  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
=======
 0000019D  B8 00000000	     1		MOV EAX, 0												;clear out eax
 00000271  B8 00000000			MOV zipDecimal2, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 0000028C  A3 00000225 R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 00000291  B8 00000249 R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 00000296  66| C7 00 0000		
 0000029B  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 000002A1  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
					
					INVOKE Student_2, addr strTempF, addr strTempL			;create the student 2 object passing in the name provided
					MOV s2, EAX												;move the address of the student into s1
					INVOKE Student_setAddr, s2, addr strTempStreet, 		;sets the address for the student corresponding to what the user typed in
					addr zipDecimal2
<<<<<<< HEAD:Project 5/Proj5.lst
 000002EA  A3 00000483 R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can reference the positions
					INVOKE Student_setTest, s2, word ptr [EDX], 1			;sets the first test score
					INVOKE Student_setTest, s2, word ptr [EDX + 2], 2		;sets the second test score
 00000304  BA 0000024D R		INVOKE Student_setTest, s2, word ptr [EDX + 4], 3		;sets the third test score
=======
 000002DB  A3 0000047F R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can reference the positions
					INVOKE Student_setTest, s2, word ptr [EDX], 1			;sets the first test score
					INVOKE Student_setTest, s2, word ptr [EDX + 2], 2		;sets the second test score
 000002F5  BA 00000249 R		INVOKE Student_setTest, s2, word ptr [EDX + 4], 3		;sets the third test score
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
						
					;student3	
					setStudentInfo testArray, 3								;gets the basic student info for the second student
					MOV EAX, 0												;initialize the zip code to 0, so it doesnt pull a random value if the user enters nothing
					PullString strTempZip, 5   								;get what the user typed and store into strTempL
					INVOKE ascint32, addr strTempZip						;converts the zip into decimal 
<<<<<<< HEAD:Project 5/Proj5.lst
 00000344  B8 00000000	     1		MOV EAX, 0												;clear out eax
 00000418  B8 00000000			MOV zipDecimal3, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 00000433  A3 0000022D R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 00000438  B8 0000024D R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 0000043D  66| C7 00 0000		
 00000442  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 00000448  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
=======
 00000335  B8 00000000	     1		MOV EAX, 0												;clear out eax
 00000409  B8 00000000			MOV zipDecimal3, EAX									;moves the decimal zip into dword 
					
					MOV EAX, offset testArray								;moves the address of the test array into eax
 00000424  A3 0000022D R		MOV word ptr [EAX], 0									;set the first test score to 0 to clear out the value from the previous student
					MOV word ptr [EAX + 2], 0								;set the second test score to 0 to clear out the value from the previous student
 00000429  B8 00000249 R		MOV word ptr [EAX + 4], 0								;set the third test score to 0 to clear out the value from the previous student
 0000042E  66| C7 00 0000		
 00000433  66| C7 40 02			DisplayString strAskValues								;display the string asking which values to store
	   0000
 00000439  66| C7 40 04			PullString numbersASCII, 50								;get what the user typed and store into numbersASCII			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000
					INVOKE extractWords, OFFSET numbersASCII, 				;call the extract words function so we have can convert our test scores into actual decimal numbers
					OFFSET testArray 
					
					INVOKE Student_2, addr strTempF, addr strTempL			;create the student 2 object passing in the name provided
					MOV s3, EAX												;move the address of the student into s3
					INVOKE Student_setAddr, s3, addr strTempStreet, 		;sets the address for the student corresponding to what the user typed in
					addr zipDecimal3
<<<<<<< HEAD:Project 5/Proj5.lst
 00000482  A3 00000487 R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can refernce the positions
					INVOKE Student_setTestScores, s3, word ptr [EDX], 		;sets the test scores for the student
					word ptr [EDX + 2], word ptr [EDX + 4]
 0000049C  BA 0000024D R		
=======
 00000473  A3 00000483 R		MOV EDX, offset testArray								;moves the address of the 3 tests array into edx so we can refernce the positions
					INVOKE Student_setTestScores, s3, word ptr [EDX], 		;sets the test scores for the student
					word ptr [EDX + 2], word ptr [EDX + 4]
 0000048D  BA 00000249 R		
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					;create copy
					INVOKE Student_3, s1									;creates a copy of student 1
					MOV s4, EAX												;moves the address into s4
					
					;display records
<<<<<<< HEAD:Project 5/Proj5.lst
 000004CB  A3 0000048B R		INVOKE Student_studentRecord, s1						;gather the student record for the student
=======
 000004BC  A3 00000487 R		INVOKE Student_studentRecord, s1						;gather the student record for the student
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s2						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s3						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_studentRecord, s4						;gather the student record for the student
					DisplayString [EAX]										;display the students information
					
					INVOKE Student_equals, s1, s2							;check to see if the two sotudents are equal
					.IF AL == 1												;if the two students are equal
						DisplayString strEqual								;display the equals message
					.ELSE													;if they are not
						DisplayString strNotEqual							;if they are not equal then, display the not equal message
					.ENDIF													;endif
					
					INVOKE Student_equals, s1, s4							;check to see if the two sotudents are equal
					.IF AL == 1												;if the two students are equal
						DisplayString strEqual								;display the equals message
					.ELSE													;if they are not
						DisplayString strNotEqual							;if they are not equal then, display the not equal message
					.ENDIF													;endif
						
					INVOKE pausesc											;press enter to continue
					
				; //1. Display s2’s test average with an appropriate message.
					MOV tempNum, 10											;moves the new line character in tempnum
					DisplayString tempNum									;skip to a new line
					DisplayString strAverage								;display average is string
<<<<<<< HEAD:Project 5/Proj5.lst
 00000577  C7 05 00000243 R		INVOKE Student_calcAvg, s2								;gets the students average in AX
=======
 00000568  C7 05 0000023F R		INVOKE Student_calcAvg, s2								;gets the students average in AX
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000000A
					CWDE													;convert to eax
					INVOKE intasc32, addr tempNum, EAX						;convert the average into ascii
					DisplayString tempNum									;displays the test score
<<<<<<< HEAD:Project 5/Proj5.lst
 000005A0  98				
=======
 00000591  98				
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				; //2. Display s1’s 2nd test score, then display his first score, then display his 3rd score.
					MOV tempNum, 10											;moves the new line character in tempnum
					DisplayString tempNum									;skip to a new line
					
<<<<<<< HEAD:Project 5/Proj5.lst
 000005B6  C7 05 00000243 R		INVOKE Student_getTest, s1, 2							;gets the test score into AX
=======
 000005A7  C7 05 0000023F R		INVOKE Student_getTest, s1, 2							;gets the test score into AX
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000000A
					CWDE													;convert the word test into dword
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 000005D7  98				DisplayString numbersASCII								;display the converted test onto the screen
 000005D8  8B D0			
=======
 000005C8  98				DisplayString numbersASCII								;display the converted test onto the screen
 000005C9  8B D0			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					DisplayString tempNum									;skip to a new line
					
					INVOKE Student_getTest, s1, 1							;gets the test score into AX
					CWDE													;convert the word test into dword	
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 00000606  98				DisplayString numbersASCII								;display the converted test onto the screen
 00000607  8B D0			
=======
 000005F7  98				DisplayString numbersASCII								;display the converted test onto the screen
 000005F8  8B D0			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					DisplayString tempNum									;skip to a new line
					
					INVOKE Student_getTest, s1, 3							;gets the test score into AX
					CWDE													;convert the word test into dword	
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 00000635  98				DisplayString numbersASCII								;display the converted test onto the screen
 00000636  8B D0			
=======
 00000626  98				DisplayString numbersASCII								;display the converted test onto the screen
 00000627  8B D0			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				; //3. pause
					INVOKE pausesc											;press enter to continue
					
				; //4. Attempt to change s1’s 4th test score to 70. 
					INVOKE Student_setTest, s1, 70, 4						;attempts to change the 4th test score to 70
					
				; //5. Attempt to Change s1’s 2nd test score to -65
					INVOKE Student_setTest, s1, -65, 2						;attemps to set the 2ns test to -65
					
				; //6. Display s1’s 2nd test score. If your setter worked correctly, it should not have changed
					DisplayString tempNum									;skip to a new line
					
					INVOKE Student_getTest, s1, 2							;get the 2nd test from the student in ax
					CWDE													;convert AX into EAX
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 00000687  98				DisplayString numbersASCII								;display the test
 00000688  8B D0			DisplayString tempNum									;skip to a new line
=======
 00000678  98				DisplayString numbersASCII								;display the test
 00000679  8B D0			DisplayString tempNum									;skip to a new line
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					
				; //7. Change s1’s name to NOTHING, that is the empty string.
					INVOKE Student_setName, s1, addr strEmpty, addr strEmpty;sets the student name to null
					
				; //8. Display s1’s name. It should still be the same
					DisplayString tempNum									;skip to a new line
					INVOKE Student_getName, s1								;get the  name of the student
					MOV EDX, EAX											;moves into edx, eax because cant invoke eax
					INVOKE putstring, EDX									;invokes putstring and passes in edx
					
<<<<<<< HEAD:Project 5/Proj5.lst
 000006D3  8B D0		; //9. pause
=======
 000006C4  8B D0		; //9. pause
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					INVOKE pausesc											;press enter to continue
					
				; //10. Display s1's highest test score with an appropriate message
					DisplayString strMaxTest								;display max test message
					INVOKE Student_findMax, s1								;get the students max test size into ax
					CWDE													;convert AX into EAX
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 000006F5  98				DisplayString numbersASCII								;display the test
 000006F6  8B D0			DisplayString tempNum
=======
 000006E6  98				DisplayString numbersASCII								;display the test
 000006E7  8B D0			DisplayString tempNum
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					
				; //11. Display s2’s lowest test score with an appropriate message.
					DisplayString strMinTest								;display min test message
					INVOKE Student_findMin, s2								;get the students min test size into ax
					CWDE													;convert AX into EAX
					MOV EDX, EAX											;shoudnt invoke eax
					INVOKE intasc32, addr numbersASCII, EDX					;convert the test number into ascii
<<<<<<< HEAD:Project 5/Proj5.lst
 0000072C  98				DisplayString numbersASCII								;display the test
 0000072D  8B D0			DisplayString tempNum
=======
 0000071D  98				DisplayString numbersASCII								;display the test
 0000071E  8B D0			DisplayString tempNum
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					
				; //12. Display s1’s lettergrade with an appropriate message.
					DisplayString strLetterGrade							;display letter grade message
					INVOKE Student_letterGrade, s1							;call the letter grade method to get the letter grade
					INVOKE putch, AL										;puts the letter grade onto the screen
					DisplayString tempNum									;skip to new line
					
				; //13. Display the name in the Student object ref by s1
					DisplayString tempNum									;skip to a new line
					INVOKE Student_getName, s1								;get the name of the student
					MOV EDX, EAX											;moves into edx, eax because cant invoke eax
					INVOKE putstring, EDX									;invokes putstring and passes in edx
					
<<<<<<< HEAD:Project 5/Proj5.lst
 00000788  8B D0		; //14. pause
=======
 00000779  8B D0		; //14. pause
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					INVOKE pausesc											;press enter to continue
					
				; //15. Display s1’s name and address using ONE method
					INVOKE Student_BasicInfo, s1							;get name and addr of the student (TECHNICALLY no restriction on me writing seperate method to do this)
					MOV EDX, EAX											;moves into edx, eax because cant invoke eax
					INVOKE putstring, EDX									;invokes putstring and passes in edx
					DisplayString tempNum									;skip to a new line
<<<<<<< HEAD:Project 5/Proj5.lst
 000007A0  8B D0			
=======
 00000791  8B D0			
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				; //16. Display the street that s2 lives on with an appropriate message.
					DisplayString strStreet									;display street message
					INVOKE Student_getStreet, s2							;get the street address
					MOV tempNum, EAX										;moves the address into a temp variable
					INVOKE putstring, tempNum								;display the street of the student
					MOV tempNum, 10											;moves the new line character in tempnum
<<<<<<< HEAD:Project 5/Proj5.lst
 000007C7  A3 00000243 R		DisplayString tempNum									;skip to a new line
						
 000007D7  C7 05 00000243 R	; //17. Display the City that s2 lives in with an appropriate message.
=======
 000007B8  A3 0000023F R		DisplayString tempNum									;skip to a new line
						
 000007C8  C7 05 0000023F R	; //17. Display the City that s2 lives in with an appropriate message.
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   0000000A
					;???????	CITY DOES NOT EXIST									
					
				; //18. Display the State that s2 lives in with an appropriate message.
					;???????	STATE DOES NOT EXIST							
					
				; //19. Display the Zip Code for s2 with an appropriate message.
					MOV numbersASCII, 0										;set first byte of the ascii string array to 0
					DisplayString strZip									;display street message
					INVOKE Student_getZip, s2								;get the students zip codoe into 
<<<<<<< HEAD:Project 5/Proj5.lst
 000007EB  C6 05 000002B3 R		.IF EAX == -1											;if the zip is null, do nothing
=======
 000007DC  C6 05 000002AF R		.IF EAX == -1											;if the zip is null, do nothing
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
	   00
					.ELSE													;if there is a zip 
						MOV EDX, EAX										;shouldnt invoke eax
						INVOKE intasc32, addr numbersASCII, EDX				;moves the zip into eax
						DisplayString numbersASCII							;display the zip from the stored address
<<<<<<< HEAD:Project 5/Proj5.lst
 0000080E  8B D0			.ENDIF													;end if
=======
 000007FF  8B D0			.ENDIF													;end if
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					
				; //20. pause
					INVOKE pausesc											;press enter to continue
				
					
				;************************************* the instructions below calls for "normal termination"	
				finished:
					INVOKE heapDestroyHarrison								;clears the memory used by heap allocharrion
					INVOKE ExitProcess,0						 
<<<<<<< HEAD:Project 5/Proj5.lst
 0000082A				PUBLIC _start
=======
 0000081B				PUBLIC _start
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
					
				main ENDP
				
				COMMENT%
<<<<<<< HEAD:Project 5/Proj5.lst
 00000836			******************************************************************************
=======
 00000827			******************************************************************************
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				*Name: pausesc                                                               *
				*Purpose:                                                                    *
				*	  When invoked, displays a message press enter to continue. When the user* 
				*		presses enter, the program returns 									 *
				*Date Created: 11/15/2019                                                    *
				*Date Modified: 11/15/2019                                                   *
				*                                                                            *
				*****************************************************************************%
				pausesc PROC stdcall
				LOCAL bbyte:byte
					INVOKE putstring, addr strPressEnter					;display the press enter to continue message
<<<<<<< HEAD:Project 5/Proj5.lst
 00000836				INVOKE getstring, addr strTemp, 0						;wait for the user to press enter
=======
 00000827				INVOKE getstring, addr strTemp, 0						;wait for the user to press enter
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				RET 														;return to where i was called.
				pausesc ENDP
				
				COMMENT%
<<<<<<< HEAD:Project 5/Proj5.lst
 00000854			******************************************************************************
=======
 00000845			******************************************************************************
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				*Name: myInfo                                                                *
				*Purpose:                                                                    *
				*	  Accepts a name and a section number and displays info to the screen    *
				*		accordingly 														 *
				*Date Created: 11/15/2019                                                    *
				*Date Modified: 11/15/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param nameAddr:dword                                                       *
				*@param sSectionAddr:dword	                                                 *
				*@param sProjNum:dword	                                                     *
				*@param sTime:dword	                                                         *
				*****************************************************************************%
				myInfo PROC stdcall, sName:dword, sSection:dword, sProjNum:dword, sTime:dword
				LOCAL bbyte:byte
				INVOKE putstring, addr strInfo1						;display the first part of the info screen
<<<<<<< HEAD:Project 5/Proj5.lst
 00000854			INVOKE putstring, sName								;display the provided name
=======
 00000845			INVOKE putstring, sName								;display the provided name
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
				INVOKE putstring, addr strInfo2						;display the second part of the info screen
				INVOKE putstring, sSection							;display the provided section
				INVOKE putstring, addr strInfo3						;display the third part of the info screen
				INVOKE intasc32, addr strProj, sProjNum				;convert the decimal number into ascii
				INVOKE putstring, addr strProj						;display the project number
				MOV EBX, sTime
				INVOKE putstring, [EBX]							;display the current time of execution
				RET													;return to where i was called from
 0000089F  8B 5D 14		myInfo ENDP
				
					END												;Signals assembler that there are no instructions after this statement
<<<<<<< HEAD:Project 5/Proj5.lst
 000008AD
Microsoft (R) Macro Assembler Version 6.11		    11/26/19 14:48:36
=======
 0000089F
Microsoft (R) Macro Assembler Version 6.11		    11/23/19 19:00:29
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
proj5.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

DisplayString  . . . . . . . . .	Proc
PullString . . . . . . . . . . .	Proc
setStudentInfo . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
<<<<<<< HEAD:Project 5/Proj5.lst
_DATA  . . . . . . . . . . . . .	32 Bit	 0000048F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008AD DWord	  Public  'CODE'	
=======
_DATA  . . . . . . . . . . . . .	32 Bit	 0000048B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000089F DWord	  Public  'CODE'	
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_1  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_3  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_BasicInfo  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_calcAvg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_equals . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_findMax  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_findMin  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getAddress . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getName  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getStreet  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getTest  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_getZip . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_letterGrade  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setAddr  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setName  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setStreet  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setTestScores  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setTest  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_setZip . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_studentRecord  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
extractWords . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getTime  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
heapDestroyHarrison  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< HEAD:Project 5/Proj5.lst
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 00000831 Public
  finished . . . . . . . . . . .	L Near	 0000082A _TEXT	
myInfo . . . . . . . . . . . . .	P Near	 00000854 _TEXT	Length= 00000059 Public STDCALL
=======
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 00000822 Public
  finished . . . . . . . . . . .	L Near	 0000081B _TEXT	
myInfo . . . . . . . . . . . . .	P Near	 00000845 _TEXT	Length= 0000005A Public STDCALL
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
  sName  . . . . . . . . . . . .	DWord	 bp + 00000008
  sSection . . . . . . . . . . .	DWord	 bp + 0000000C
  sProjNum . . . . . . . . . . .	DWord	 bp + 00000010
  sTime  . . . . . . . . . . . .	DWord	 bp + 00000014
  bbyte  . . . . . . . . . . . .	Byte	 bp - 00000001
<<<<<<< HEAD:Project 5/Proj5.lst
pausesc  . . . . . . . . . . . .	P Near	 00000836 _TEXT	Length= 0000001E Public STDCALL
=======
pausesc  . . . . . . . . . . . .	P Near	 00000827 _TEXT	Length= 0000001E Public STDCALL
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
  bbyte  . . . . . . . . . . . .	Byte	 bp - 00000001
putch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
<<<<<<< HEAD:Project 5/Proj5.lst
numbersASCII . . . . . . . . . .	Byte	 000002B3 _DATA	
s1 . . . . . . . . . . . . . . .	DWord	 0000047F _DATA	
s2 . . . . . . . . . . . . . . .	DWord	 00000483 _DATA	
s3 . . . . . . . . . . . . . . .	DWord	 00000487 _DATA	
s4 . . . . . . . . . . . . . . .	DWord	 0000048B _DATA	
=======
numbersASCII . . . . . . . . . .	Byte	 000002AF _DATA	
s1 . . . . . . . . . . . . . . .	DWord	 0000047B _DATA	
s2 . . . . . . . . . . . . . . .	DWord	 0000047F _DATA	
s3 . . . . . . . . . . . . . . .	DWord	 00000483 _DATA	
s4 . . . . . . . . . . . . . . .	DWord	 00000487 _DATA	
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
strAsciiChar . . . . . . . . . .	Byte	 0000023D _DATA	
strAskValues . . . . . . . . . .	Byte	 0000005A _DATA	
strAverage . . . . . . . . . . .	Byte	 00000103 _DATA	
strCol . . . . . . . . . . . . .	Byte	 0000021A _DATA	
<<<<<<< HEAD:Project 5/Proj5.lst
strEmpty . . . . . . . . . . . .	Byte	 00000242 _DATA	
=======
strEmpty . . . . . . . . . . . .	Byte	 0000023E _DATA	
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
strEqual . . . . . . . . . . . .	Byte	 000001E5 _DATA	
strInfo1 . . . . . . . . . . . .	Byte	 00000019 _DATA	
strInfo2 . . . . . . . . . . . .	Byte	 00000026 _DATA	
strInfo3 . . . . . . . . . . . .	Byte	 00000033 _DATA	
strLetterGrade . . . . . . . . .	Byte	 000001BC _DATA	
strMaxTest . . . . . . . . . . .	Byte	 00000131 _DATA	
strMinTest . . . . . . . . . . .	Byte	 00000157 _DATA	
strName  . . . . . . . . . . . .	Byte	 00000000 _DATA	
strNotEqual  . . . . . . . . . .	Byte	 000001FE _DATA	
strPressEnter  . . . . . . . . .	Byte	 00000040 _DATA	
<<<<<<< HEAD:Project 5/Proj5.lst
strProj  . . . . . . . . . . . .	Byte	 00000248 _DATA	
=======
strProj  . . . . . . . . . . . .	Byte	 00000244 _DATA	
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
strSection . . . . . . . . . . .	Byte	 0000000B _DATA	
strStreet  . . . . . . . . . . .	Byte	 0000017D _DATA	
strStudentFName  . . . . . . . .	Byte	 0000007A _DATA	
strStudentLName  . . . . . . . .	Byte	 0000009E _DATA	
strStudentStreet . . . . . . . .	Byte	 000000C0 _DATA	
strStudentZip  . . . . . . . . .	Byte	 000000DF _DATA	
<<<<<<< HEAD:Project 5/Proj5.lst
strTempF . . . . . . . . . . . .	Byte	 000002E6 _DATA	
strTempL . . . . . . . . . . . .	Byte	 0000034B _DATA	
strTempStreet  . . . . . . . . .	Byte	 000003B0 _DATA	
strTempZip . . . . . . . . . . .	Byte	 00000479 _DATA	
strTemp  . . . . . . . . . . . .	Byte	 00000247 _DATA	
strTime  . . . . . . . . . . . .	DWord	 0000023E _DATA	
strZip . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
tempNum  . . . . . . . . . . . .	DWord	 00000243 _DATA	
testArray  . . . . . . . . . . .	Word	 0000024D _DATA	
=======
strTempF . . . . . . . . . . . .	Byte	 000002E2 _DATA	
strTempL . . . . . . . . . . . .	Byte	 00000347 _DATA	
strTempStreet  . . . . . . . . .	Byte	 000003AC _DATA	
strTempZip . . . . . . . . . . .	Byte	 00000475 _DATA	
strTemp  . . . . . . . . . . . .	Byte	 00000243 _DATA	
strZip . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
tempNum  . . . . . . . . . . . .	DWord	 0000023F _DATA	
testArray  . . . . . . . . . . .	Word	 00000249 _DATA	
>>>>>>> 900cf4b6f4d7d1fd1b3096de2d547a21db4cae45:Project 5/proj5.lst
zipDecimal1  . . . . . . . . . .	DWord	 0000021D _DATA	
zipDecimal2  . . . . . . . . . .	DWord	 00000225 _DATA	
zipDecimal3  . . . . . . . . . .	DWord	 0000022D _DATA	
zipDecimal4  . . . . . . . . . .	DWord	 00000235 _DATA	

	   0 Warnings
	   0 Errors
