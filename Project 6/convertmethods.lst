Microsoft (R) Macro Assembler Version 6.11		    12/05/19 14:01:18
convertmethods.asm					     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: convertMethods.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:		  Project 6b
				;*  Date:         Created 12/07/2019
				;*  Purpose:      Methods to convert hex characters to the relative ACII version. Vise versa with a d-word mask maker
				;*					and a 32-bit encryption method to encrypt strings.
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD			;Executes "normal" termination
					memoryallocBailey PROTO Near32 stdcall, dSize:DWORD			;dynamically allocate bytes in memory
				;******************************************************************************************
				COMMENT %
				
				******************************************************************************
				*Name: getBytes                                                              *
				*Purpose:                                                                    *
				*	  Intakes an address and counts the number of bytes into a string including*
				*     the null char and returns the number.                                  *
				*Date Created: 10/24/2019                                                    *
				*Date Modified: 10/25/2019                                                   *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				getBytes MACRO String:REQ
					LOCAL stLoop						;add a local label so the assembler doesn't yell when this is called more than once
					LOCAL done							;add a local label so the assembler doesn't yell when this is called more than once
					PUSH EBP							;preserves base register
					MOV EBP, ESP						;sets a new stack frame
					PUSH EBX							;pushes EBX to the stack to store this
					PUSH ESI							;pushes ESI to the stack to preserve
					MOV EBX, String						;;moves into EBX the first val in the stack that we are going to use
					MOV ESI, 0							;sets the initial point to 0
							stLoop:
						CMP byte ptr [EBX + ESI], 0		;compares the two positions to determine if this is the end of the string
						JE done							;;if it is jump to finished
						INC ESI							;if not increment ESI
						JMP stLoop						;;jump to the top of the loop and look at the next char
					done:		
						INC ESI							;increment ESI to include the null character in the string
						MOV EAX, ESI					;move the value of ESI into EAX for proper output and return
						POP ESI								;restore original ESI
					POP EBX								;restore original EBX
					POP EBP								;restore original EBP
				ENDM
				;******************************************************************************************
				.DATA
					WhiteListChars byte 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61h, 62h, 63h, 64h, 65h, 66h, 41h, 42h, 43h, 44h, 45h, 46h 		
 00000000													;set of white-listed characters, 0 1 2 3 4 5 6 7 8 9 ABCDEF abcdef
 00000000 30 31 32 33 34		bTemps byte 50 dup(?)				;memory to hold the number that is built in extractDwords
	   35 36 37 38 39
	   61 62 63 64 65
	   66 41 42 43 44
	   45 46
					crlf byte  10,13,0					;Null-terminated string to skip to new line
 00000016  00000032 [		;******************************************************************************************
	    00
	   ]
 00000048 0A 0D 00		.CODE
				COMMENT%
 00000000			******************************************************************************
				*Name: hexToCharacter                                                        *
				*Purpose:                                                                    *
				*	  Intakes a address of hex chars, converts them to ascii, then returns a *
				*		new address with ascii characters									 *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/28/2019                                                   *
				*                                                                            *
				*@param lpDestination:dword                                                  *
				*@param lpSource:dword                                                       *
				*@param numBytes:dword                                                       *
				*****************************************************************************%
				hexToCharacter PROC stdcall uses EBX EDX EDI ESI, lpDestination:dword, lpSource:dword, numBytes:dword
				LOCAL tempByte:byte				;sets up our stack frame and declares our local variables.
 00000000			MOV EBX, numBytes				;move the number of bytes to be copied into EBX
				
 0000000A  8B 5D 10		.IF EBX == 0					;if it is equal to 0
					MOV EDI, 4					;if the number of bytes is 0, then we are going to treat the 2nd param as a d-word
					
 00000011  BF 00000004			MOV EBX, lpSource			;load the address of the source into EBX
					MOV EDX, lpDestination		;load the address of the destination into EDX
 00000016  8B 5D 0C			MOV ESI, 0					;set the starting point in the destination 
 00000019  8B 55 08		
 0000001C  BE 00000000			.WHILE EDI != 0				;while there are still bytes to copy
						DEC EDI					;get 1 less the max
						MOV AL, [EBX + EDI]		;retrieve the byte at position EBX + n
 00000023  4F					SHR AL , 4				;shift the bits right to clear out the bits below to get the LO
 00000024  8A 04 1F		
 00000027  C0 E8 04				.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
							ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 0000002E  04 57					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;end if
 00000032  04 30				
						MOV [EDX + ESI], AL		;move into the destination our hex digit
						INC ESI					;increment to the next output position
 00000034  88 04 16				
 00000037  46					MOV AL, [EBX + EDI]		;move the same byte into AL 
						SHL AL , 4				;clear out the bits above so we get the HO of the byte
 00000038  8A 04 1F				SHR AL , 4				;shift it back so we can properly do calculation
 0000003B  C0 E0 04		
 0000003E  C0 E8 04				.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
							ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 00000045  04 57					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;end if
 00000049  04 30				
						MOV [EDX + ESI], AL		;move into the destination our hex digit
						INC ESI					;increment to the next output position
 0000004B  88 04 16			.ENDW						;end while
 0000004E  46			
					MOV AL, 0					;move null character into AL
					MOV [EDX + ESI], AL			;append null
 00000053  B0 00		
 00000055  88 04 16		.ELSE							;if it is not 0
					MOV ECX, EBX				;if it is not 0 then we will put the number of bytes to be converted into EDI
					
 0000005A  8B CB			MOV EBX, lpSource			;load the address of the source into EBX
					MOV EDX, lpDestination		;load the address of the destination into EEDX
 0000005C  8B 5D 0C			MOV ESI, 0					;set the starting point in the destination 
 0000005F  8B 55 08			MOV EDI, 0					;set initial position to place output to 0
 00000062  BE 00000000			.REPEAT
 00000067  BF 00000000				DEC ECX					;get n-1 bytes so we don't interfere with the do while
						
 0000006C  49					MOV AL, [EBX + ESI]		;retrieve the byte at position EBX + n
						MOV tempByte, AL
 0000006D  8A 04 1E				SHR AL , 4				;shift the bits right to clear out the bits below to get the LO
 00000070  88 45 FF		
 00000073  C0 E8 04				.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
							ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 0000007A  04 57					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;end if
 0000007E  04 30				
						MOV [EDX + EDI], AL		;move into the destination our hex digit
						INC EDI					;increment to next output position
 00000080  88 04 17				INC ESI					;increment to the next byte to grab
 00000083  47					
 00000084  46					MOV AL, tempByte		;move the same byte into AL 
						SHL AL , 4				;clear out the bits above so we get the HO of the byte
 00000085  8A 45 FF				SHR AL , 4				;shift it back so we can properly do calculation
 00000088  C0 E0 04		
 0000008B  C0 E8 04				.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
							ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 00000092  04 57					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;end if
 00000096  04 30				
						MOV [EDX + EDI], AL		;move into the destination our hex digit
						INC EDI					;increment to next output position
 00000098  88 04 17				
 0000009B  47				.UNTIL ECX == 0				;repeat until there are no more bytes
					
					MOV AL, 0					;move null character into AL
					MOV [EDX + EDI], AL			;append null
 000000A0  B0 00		.ENDIF							;end if
 000000A2  88 04 17			
				RET 							;return back with 12 bytes used
				hexToCharacter ENDP
				
 000000AD			COMMENT%
				******************************************************************************
				*Name: charTo4HexDigits                                                      *
				*Purpose:                                                                    *
				*	  Accepts a null terminated strings and returns a dword mask    		 *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/29/2019                                                   *
				*                                                                            *
				*@param lpSourceString:dword                                                 *
				*@returns dMask:dword                                                        *
				*****************************************************************************%
				charTo4HexDigits PROC stdcall uses EBX ECX EDX EDI ESI, lpSourceString:dword
				LOCAL outVal:dword, inASCII:dword, numBytes:Byte;sets up our stack frame and declares our local variables.
 000000AD				MOV EAX, lpSourceString						;moves into EAX the address of the array with ASCII values.
					MOV inASCII, EAX							;moves the address into our local variable for clarity.
 000000B8  8B 45 08		
 000000BB  89 45 F8			getBytes EAX								;get the number of bytes to see if it is bigger than 4 bytes
					MOV numBytes, AL							;store the number of bytes for later calculation
					.IF AL > 9 || AL < 9						;if they're more or less than 4 bytes then 
 000000BE  55		     1		PUSH EBP							
 000000BF  8B EC	     1		MOV EBP, ESP						
 000000C1  53		     1		PUSH EBX							
 000000C2  56		     1		PUSH ESI							
 000000C3  8B D8	     1		MOV EBX, EAX						
 000000C5  BE 00000000	     1		MOV ESI, 0							
 000000CA		     1		??0000:
 000000CA  80 3C 1E 00	     1			CMP byte ptr [EBX + ESI], 0		
 000000CE  74 03	     1			JE ??0001							
 000000D0  46		     1			INC ESI							
 000000D1  EB F7	     1			JMP ??0000						
 000000D3		     1		??0001:		
 000000D3  46		     1			INC ESI							
 000000D4  8B C6	     1			MOV EAX, ESI					
 000000D6  5E		     1		POP ESI								
 000000D7  5B		     1		POP EBX								
 000000D8  5D		     1		POP EBP								
 000000D9  88 45 F7				MOV EAX, -1								;move -1 into the output
						JMP finished							;jump to return 
 000000E4  B8 FFFFFFFF			.ENDIF										;end if
 000000E9  E9 000000FC			
					MOV EBX, 0									;set EBX to 0 to avoid calculation error
					MOV EDI, 0									;sets our initial point in bTemps to the first place
 000000EE  BB 00000000			
 000000F3  BF 00000000			lpConvertandMove:	
						MOV EAX, inASCII						;moves the address of the ASCII values into EAX so we can reference it
 000000F8					MOV BL, byte ptr [EAX]					;moves into BL the byte at the address position
 000000F8  8B 45 F8				CMP BL, 00								;compares this byte to 00 to test if we are at the end of the array
 000000FB  8A 18				JE Packnfinish							;if it is equal to 00, then jump to the finished label. 
 000000FD  80 FB 00				
 00000100  74 4B				MOV ECX, lengthof WhiteListChars		;sets up our loop with the number of elements in the white-listed characters array
						MOV ESI, 0								;set initial offset in the white-list to 0
 00000102  B9 00000016				
 00000107  BE 00000000				lpCompareWhitelist:
							CMP BL, WhiteListChars[ESI]			;compares bl to see if it is one of the white-listed characters
 0000010C						JE ValidChar						;if it is a valid char, jump to the valid section
 0000010C  3A 9E 00000000 R				INC ESI								;increment ESI to the next position in the white-listed characters array
 00000112  74 08				loop lpCompareWhitelist					;decrement ECX and loop back up
 00000114  46															;if it is not a valid char this executes
 00000115  E2 F5				
						INC inASCII								;increment inASCII so we get the next byte
						JMP lpConvertandMove					;jump back up to the top to start the loop over again
 00000117  FF 45 F8				
 0000011A  EB DC				ValidChar:
							MOV bTemps[EDI], BL					;Moves into btemps at position EDI the byte in bl to hold that byte of the number that is building
 0000011C						INC inASCII							;increment to the next position of inASCII so we can see if the next char is valid
 0000011C  88 9F 00000016 R				MOV EAX, inASCII					;moves into EAX the new address of the next byte 
 00000122  FF 45 F8					MOV BL, byte ptr [EAX]				;moves the byte into Bl 
 00000125  8B 45 F8					DEC inASCII							;change it back to the previous character
 00000128  8A 18					
 0000012A  FF 4D F8					MOV ECX, lengthof WhiteListChars	;adds the number of elements in white-listed characters array into ECX for the loop
							MOV ESI, 0							;sets our initial position in the white-listed characters array to 0
 0000012D  B9 00000016				
 00000132  BE 00000000					lpCompareNext:
								CMP BL, WhiteListChars[ESI]		;This compares the next byte to see if it is white-listed too
 00000137							JE ValidNextChar				;if it is a valid character, jump to the valid next char section
 00000137  3A 9E 00000000 R					INC ESI							;increment ESI if it is not valid to get to the next position in white-listed characters
 0000013D  74 08					loop lpCompareNext					;decrement ECX and go to the top of the current loop
 0000013F  46						
 00000140  E2 F5					INC inASCII							;increments inASCII so we get the next byte in memory
							JMP lpConvertandMove				;jump back up to the very top of the loop 
 00000142  FF 45 F8					
 00000145  EB B1				ValidNextChar:
							INC EDI								;increment EDI so we can input in the next position in bTemps
 00000147						INC inASCII							;increment inASCII so we get the next byte in memory
 00000147  47						JMP lpConvertandMove				;jump back up to the very top of the loop
 00000148  FF 45 F8								
 0000014B  EB AB			Packnfinish:
						MOV ESI, 0								;sets our initial position in the bvals array to 0	
 0000014D					MOVSX AX, numBytes						;moves the number of bytes into ax
 0000014D  BE 00000000				MOV BL, 2								;we need to divide by two so the loop doesn't execute more than it needs to
 00000152  66| 0F BE 45				iDIV BL									;divide by 2
	   F7
 00000157  B3 02				MOV CL, AL								;move the resulting number into cl for looping
 00000159  F6 FB				MOV EAX, 0								;clear out EAX so we don't get any calculation errors
 0000015B  8A C8				
 0000015D  B8 00000000				.WHILE ECX != 0							;while cl is not equal to 0, execute the loop
							MOV BL, bTemps[ESI]					;move the current byte into bl
							.IF BL < 30h && BL < 41h || BL > 46h && BL < 61h || BL > 66h
 00000164  8A 9E 00000016 R													;the above statement checks to see if the current character is invalid
								MOV EAX, -1						;move -1 into the output
								JMP finished					;jump to return 
 00000183  B8 FFFFFFFF					.ENDIF								;end if
 00000188  EB 60					
							.IF BL >= 65						;if the nibble grabbed is greater than or equal to 10
								SUB BL, 55						;we need to sub 55 to get the correct hex value
							.ELSE								;if it is not
 0000018F  80 EB 37						SUB BL, 48						;we need to sub 48 to get the correct hex value
							.ENDIF								;end if
 00000194  80 EB 30					
							SHL BX, 8							;shift bx over to get it out of bl so we don't override it
							INC ESI								;increment ESI if it is not valid to get to the next position in white-listed characters
 00000197  66| C1 E3 08					
 0000019B  46						MOV BL, bTemps[ESI]					;move the current byte into bl
							.IF BL < 30h && BL < 41h || BL > 46h && BL < 61h || BL > 66h
 0000019C  8A 9E 00000016 R													;the above statement checks to see if the current character is invalid
								MOV EAX, -1						;move -1 into the output
								JMP finished					;jump to return 
 000001BB  B8 FFFFFFFF					.ENDIF
 000001C0  EB 28					
							.IF BL >= 65						;if the nibble grabbed is greater than or equal to 10
								SUB BL, 55						;we need to sub 55 to get the correct hex value
							.ELSE								;if it is not
 000001C7  80 EB 37						SUB BL, 48						;we need to sub 48 to get the correct hex value
							.ENDIF								;end if
 000001CC  80 EB 30					
							SHL BL, 4							;shift bl over by 4 bytes so it lines up with the previously pushed nibble
							SHR BX, 4							;shift bx back to get the value into bl
 000001CF  C0 E3 04					MOV AL, BL							;move the result into AL
 000001D2  66| C1 EB 04					
 000001D6  8A C3					.IF ECX != 1						;if we are not in the last iteration of the loop
								SHL EAX, 8						;shift EAX left to make room for a new value
							.ENDIF								;end if
 000001DD  C1 E0 08		
							INC ESI								;increment ESI if it is not valid to get to the next position in white-listed characters
							DEC ECX								;decrement ECX to eventually terminate the loop
 000001E0  46					.ENDW									;go to the top of the current loop
 000001E1  49			
					finished:
						RET										;return back to where i was called 
 000001EA			charTo4HexDigits ENDP
				
 000001F3			COMMENT%
				******************************************************************************
				*Name: encrypt32Bit                                                          *
				*Purpose:                                                                    *
				*	  Intakes a source string, a mask and the number of bytes, encryptes them*
				*		and returns a new address with the encripted values                  *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/30/2019                                                   *
				*                                                                            *
				*@param lpSourceString:dword                                                 *
				*@param dMask:dword                                                          *
				*@param numBytes:dword                                                       *
				*@returns encryptedAddr:dword                                                *
				*****************************************************************************%
				encrypt32Bit PROC stdcall uses EBX ECX EDX ESI, lpSourceString:dword, dMask:dword , numBytes:dword
				LOCAL outAddr:dword, remainder:byte 		;set up stack frame and declare local variables
 000001F3			
					INVOKE memoryallocBailey, numBytes		;allocate enough memory on the heap to store the output 
					MOV outAddr, EAX						;stores the output address inside a local variable
				
 00000205  89 45 FC			MOV EAX, numBytes						;move the number of bytes into EAX so we can calculate if string is appropriate size
					MOV EBX, 4								;move into EBX 4 so we can divide
 00000208  8B 45 10			XOR EDX, EDX							;set EDX to 0
 0000020B  BB 00000004			DIV EBX									;divide by 4 to get remainder 
 00000210  33 D2			MOV remainder, DL						;store the remainder
 00000212  F7 F3			MOVSX ECX, AX							;move the number of times 4 goes into the number of bytes into ECX
 00000214  88 55 FB		
 00000217  0F BF C8			MOV EAX, dMask							;move the mask passed in into EAX
					XOR ESI, ESI							;set ESI to 0
 0000021A  8B 45 0C			XOR EBX, EBX							;set EBX to 0
 0000021D  33 F6		
 0000021F  33 DB			.WHILE ECX !=0							;while ECX is not 0
						MOV EDX, lpSourceString				;move the source string into EDX
						MOV EBX, [EDX + ESI]				;move the 4 bytes in location EDX + ESI into EBX
 00000223  8B 55 08				XOR EBX, EAX						;XOR the two registers together for encryption
 00000226  8B 1C 16				MOV EDX, outAddr					;moves the out address into EDX
 00000229  33 D8				MOV [EDX + ESI], EBX				;moves the encrypted 4 bytes into the output address location
 0000022B  8B 55 FC				
 0000022E  89 1C 16				ADD ESI, 4							;add 4 to ESI to get the next 4 bytes
						DEC ECX								;decrement ECX so we can terminate the loop
 00000231  83 C6 04			.ENDW
 00000234  49			
					MOVSX EBX, remainder					;move the remainder into EBX
					.IF remainder == 0						;if the remainder is 0, we are done
 00000239  0F BE 5D FB				JMP Done							;jump to done
					.ELSEIF remainder == 1					;if the remainder is 1
 00000243  EB 2D				MOV CL, 24							;move the number of bits we need to shift
					.ELSEIF remainder ==2 					;if the remainder is 2
 0000024D  B1 18				MOV CL, 16							;move into CL the number of bits we need to shift
					.ELSE 									;if the remainder is 3
 00000257  B1 10				MOV CL, 8							;move into CL the number of bits we need to shift
					.ENDIF									;end if
 0000025B  B1 08		
					MOV EAX, dMask							;move the mask into EAX for encryption of the remaining bits
					SHR EAX, CL								;shift the mask CL number of bits to appropriately encrypt
 0000025D  8B 45 0C			XOR EBX, EBX							;set EBX to 0
 00000260  D3 E8				
 00000262  33 DB			MOV EDX, lpSourceString					;move the source string into EDX
					MOV EBX, [EDX + ESI]					;move the 4 bytes in location EDX + ESI into EBX
 00000264  8B 55 08			XOR EBX, EAX							;XOR the two registers together for encryption
 00000267  8B 1C 16			MOV EDX, outAddr						;moves the out address into EDX
 0000026A  33 D8			MOV [EDX + ESI], EBX					;moves the encrypted 4 bytes into the output address location
 0000026C  8B 55 FC		
 0000026F  89 1C 16			Done:
						MOV EAX, outAddr					;move the encrypted output address into EAX
 00000272					RET									;return to where I was called from
 00000272  8B 45 FC		encrypt32Bit ENDP
				;************************************* the instructions below calls for "normal termination"	
 0000027D			
				END
Microsoft (R) Macro Assembler Version 6.11		    12/05/19 14:01:18
convertmethods.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

getBytes . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000004B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000027D DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
charTo4HexDigits . . . . . . . .	P Near	 000000AD _TEXT	Length= 0000014D Public STDCALL
  lpSourceString . . . . . . . .	DWord	 bp + 00000008
  outVal . . . . . . . . . . . .	DWord	 bp - 00000004
  inASCII  . . . . . . . . . . .	DWord	 bp - 00000008
  numBytes . . . . . . . . . . .	Byte	 bp - 00000009
  ??0000 . . . . . . . . . . . .	L Near	 000000CA _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  lpConvertandMove . . . . . . .	L Near	 000000F8 _TEXT	
  lpCompareWhitelist . . . . . .	L Near	 0000010C _TEXT	
  ValidChar  . . . . . . . . . .	L Near	 0000011C _TEXT	
  lpCompareNext  . . . . . . . .	L Near	 00000137 _TEXT	
  ValidNextChar  . . . . . . . .	L Near	 00000147 _TEXT	
  Packnfinish  . . . . . . . . .	L Near	 0000014D _TEXT	
  finished . . . . . . . . . . .	L Near	 000001EA _TEXT	
encrypt32Bit . . . . . . . . . .	P Near	 000001F3 _TEXT	Length= 0000008A Public STDCALL
  lpSourceString . . . . . . . .	DWord	 bp + 00000008
  dMask  . . . . . . . . . . . .	DWord	 bp + 0000000C
  numBytes . . . . . . . . . . .	DWord	 bp + 00000010
  outAddr  . . . . . . . . . . .	DWord	 bp - 00000004
  remainder  . . . . . . . . . .	Byte	 bp - 00000005
  Done . . . . . . . . . . . . .	L Near	 00000272 _TEXT	
hexToCharacter . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AD Public STDCALL
  lpDestination  . . . . . . . .	DWord	 bp + 00000008
  lpSource . . . . . . . . . . .	DWord	 bp + 0000000C
  numBytes . . . . . . . . . . .	DWord	 bp + 00000010
  tempByte . . . . . . . . . . .	Byte	 bp - 00000001
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
WhiteListChars . . . . . . . . .	Byte	 00000000 _DATA	
bTemps . . . . . . . . . . . . .	Byte	 00000016 _DATA	
crlf . . . . . . . . . . . . . .	Byte	 00000048 _DATA	

	   0 Warnings
	   0 Errors
