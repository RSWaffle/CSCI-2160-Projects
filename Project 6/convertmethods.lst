Microsoft (R) Macro Assembler Version 6.11		    11/29/19 23:56:46
convertmethods.asm					     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: convertMethods.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:		  Project 6b
				;*  Date:         Created 12/07/2019
				;*  Purpose:      Methods to convert ascii characters to hex characters and vise versa, with encryption
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  						;Executes "normal" termination
					memoryallocBailey PROTO Near32 stdcall, dSize:DWORD							;dynamically allocate bytes in memory
					putstring  PROTO NEAR stdcall, lpStringToDisplay:dword
					hexToCharacter PROTO stdcall, lpDestination:dword, lpSource:dword, numBytes:dword
				;******************************************************************************************
				COMMENT %

				******************************************************************************
				*Name: getBytes                                                              *
				*Purpose:                                                                    *
				*	  Intakes an address and counts the number of bytes into a string including*
				*     the null char and returns the number.                                  *
				*Date Created: 10/24/2019                                                    *
				*Date Modified: 10/25/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param String1:byte                                                         *
				*****************************************************************************%
				getBytes MACRO String:REQ
					LOCAL stLoop						;add a local label so the assembler doesnt yell when this is called more than once
					LOCAL done							;add a local label so the assembler doesnt yell when this is called more than once
					PUSH EBP							;preserves base register
					MOV EBP, ESP						;sets a new stack frame
					PUSH EBX							;pushes EBX to the stack to store this
					PUSH ESI							;pushes ESI to the stack to preseve
					MOV EBX, String						;;moves into ebx the first val in the stack that we are going to use
					MOV ESI, 0							;sets the initial point to 0
						
					stLoop:
						CMP byte ptr [EBX + ESI], 0		;compares the two positions to determine if this is the end of the string
						JE done							;;if it is jump to finished
						INC ESI							;if not increment esi
						JMP stLoop						;;jump to the top of the loop and look at the next char
					done:		
						INC ESI							;increment esi to include the null character in the string
						MOV EAX, ESI					;move the value of esi into eax for proper output and return
					
					POP ESI								;restore original esi
					POP EBX								;restore original ebx
					POP EBP								;restore originla ebp
				ENDM
				;******************************************************************************************
 00000000			.DATA
 00000000 30 31 32 33 34		WhiteListChars byte 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61h, 62h, 63h, 64h, 65h, 66h, 41h, 42h, 43h, 44h, 45h, 46h 		
	   35 36 37 38 39
	   61 62 63 64 65
	   66 41 42 43 44
	   45 46
																	;set of whitelisted characters, 0 1 2 3 4 5 6 7 8 9 ABCDEF (upper and lower case)
 00000016  00000032 [			bTemps byte 50 dup(?)							;memory to hold the number that is built in extractDwords
	    00
	   ]
 00000048 0A 0D 00			crlf byte  10,13,0								;Null-terminated string to skip to new line
				;******************************************************************************************
 00000000			.CODE
				COMMENT%
				******************************************************************************
				*Name: hexToCharacter                                                        *
				*Purpose:                                                                    *
				*	  Intakes a address of hex chars, converts them to ascii, then returns a *
				*		new address with ascii characters									 *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/28/2019                                                   *
				*                                                                            *
				*@param lpDestination:dword                                                  *
				*@param lpSource:dword                                                       *
				*@param numBytes:dword                                                       *
				*****************************************************************************%
 00000000			hexToCharacter PROC stdcall uses EBX EDX EDI ESI, lpDestination:dword, lpSource:dword, numBytes:dword
				LOCAL tempByte:byte				;sets up our stack frame and declares our local variables.
 0000000A  8B 5D 10		MOV EBX, numBytes				;move the number of bytes to be copied into ebx

				.IF EBX == 0					;if it is equal to 0
 00000011  BF 00000004			MOV EDI, 4					;if the number of bytes is 0, then we are going to treat the 2nd param as a dword
					
 00000016  8B 5D 0C			MOV EBX, lpSource			;load the address of the source into ebx
 00000019  8B 55 08			MOV EDX, lpDestination		;load the address of the destination into edx
 0000001C  BE 00000000			MOV ESI, 0					;set the starting point in the destination 

					.WHILE EDI != 0				;while there are still bytes to copy
 00000023  4F					DEC EDI					;get 1 less the max
 00000024  8A 04 1F				MOV AL, [EBX + EDI]		;retreive the byte at position ebx + n
 00000027  C0 E8 04				SHR AL , 4				;shift the bits right to clear out the bits below to get the LO

						.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
 0000002E  04 57					ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 00000032  04 30					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;endif
						
 00000034  88 04 16				MOV [EDX + ESI], AL		;move into the destination our hex digit
 00000037  46					INC ESI					;increment to the next output position
						
 00000038  8A 04 1F				MOV AL, [EBX + EDI]		;move the same byte into al 
 0000003B  C0 E0 04				SHL AL , 4				;clear out the bits above so we get the HO of the byte
 0000003E  C0 E8 04				SHR AL , 4				;shift it back so we can properly do calculation

						.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
 00000045  04 57					ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 00000049  04 30					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;endif
						
 0000004B  88 04 16				MOV [EDX + ESI], AL		;move into the destination our hex digit
 0000004E  46					INC ESI					;increment to the next output position
					.ENDW						;end while

 00000053  B0 00			MOV AL, 0					;move null character into AL
 00000055  88 04 16			MOV [EDX + ESI], AL			;append null

				.ELSE							;if it is not 0
 0000005A  8B CB			MOV ECX, EBX				;if it is not 0 then we will put the number of bytes to be converted into edi
					
 0000005C  8B 5D 0C			MOV EBX, lpSource			;load the address of the source into ebx
 0000005F  8B 55 08			MOV EDX, lpDestination		;load the address of the destination into edx
 00000062  BE 00000000			MOV ESI, 0					;set the starting point in the destination 
 00000067  BF 00000000			MOV EDI, 0					;set initial position to place output to 0
					.REPEAT
 0000006C  49					DEC ECX					;get n-1 bytes so we dont interfere with the do while
						
 0000006D  8A 04 1E				MOV AL, [EBX + ESI]		;retreive the byte at position ebx + n
 00000070  88 45 FF				MOV tempByte, AL
 00000073  C0 E8 04				SHR AL , 4				;shift the bits right to clear out the bits below to get the LO

						.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
 0000007A  04 57					ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 0000007E  04 30					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;endif
						
 00000080  88 04 17				MOV [EDX + EDI], AL		;move into the destination our hex digit
 00000083  47					INC EDI					;increment to next output position
 00000084  46					INC ESI					;increment to the next byte to grab
						
 00000085  8A 45 FF				MOV AL, tempByte		;move the same byte into al 
 00000088  C0 E0 04				SHL AL , 4				;clear out the bits above so we get the HO of the byte
 0000008B  C0 E8 04				SHR AL , 4				;shift it back so we can properly do calculation

						.IF AL >= 10			;if the nibble grabbed is greater than or equal to 10
 00000092  04 57					ADD AL, 87			;we need to add 87 to get the correct hex value
						.ELSE					;if it is not
 00000096  04 30					ADD AL, 48			;we need to add 48 to get the correct hex value
						.ENDIF					;endif
						
 00000098  88 04 17				MOV [EDX + EDI], AL		;move into the destination our hex digit
 0000009B  47					INC EDI					;increment to next output position
						
					.UNTIL ECX == 0				;repeat until there are no more bytes
					
 000000A0  B0 00			MOV AL, 0					;move null character into AL
 000000A2  88 04 17			MOV [EDX + EDI], AL			;append null
				.ENDIF							;endif
					
				RET 							;return back with 12 bytes used
 000000AD			hexToCharacter ENDP

				COMMENT%
				******************************************************************************
				*Name: charTo4HexDigits                                                      *
				*Purpose:                                                                    *
				*	  Accepts a null terminated strings and returns a dword mask    		 *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/29/2019                                                   *
				*                                                                            *
				*@param lpSourceString:dword                                                 *
				*@returns dMask:dword                                                        *
				*****************************************************************************%
 000000AD			charTo4HexDigits PROC stdcall uses EBX ECX EDX EDI ESI, lpSourceString:dword
				LOCAL outVal:dword, inASCII:dword, numBytes:Byte
																;sets up our stack frame and declares our local variables.
 000000B8  8B 45 08			MOV EAX, lpSourceString						;moves into EAX the address of the array with ascii values.
 000000BB  89 45 F8			MOV inASCII, EAX							;moves the address into our local variable for clarity.

					getBytes EAX								;get the number of bytes to see if it is bigger than 4 bytes
 000000BE  55		     1		PUSH EBP							
 000000BF  8B EC	     1		MOV EBP, ESP						
 000000C1  53		     1		PUSH EBX							
 000000C2  56		     1		PUSH ESI							
 000000C3  8B D8	     1		MOV EBX, EAX						
 000000C5  BE 00000000	     1		MOV ESI, 0							
 000000CA		     1		??0000:
 000000CA  80 3C 1E 00	     1			CMP byte ptr [EBX + ESI], 0		
 000000CE  74 03	     1			JE ??0001							
 000000D0  46		     1			INC ESI							
 000000D1  EB F7	     1			JMP ??0000						
 000000D3		     1		??0001:		
 000000D3  46		     1			INC ESI							
 000000D4  8B C6	     1			MOV EAX, ESI					
 000000D6  5E		     1		POP ESI								
 000000D7  5B		     1		POP EBX								
 000000D8  5D		     1		POP EBP								
 000000D9  88 45 F7			MOV numBytes, AL							;store the number of bytes for later calculation
					.IF AL >= 10								;if theyre more than 4 bytes then 
 000000E0  B8 FFFFFFFF				MOV EAX, -1								;move -1 into the output
 000000E5  E9 000000FC				JMP finished							;jump to return 
					.ENDIF										;endif
					
 000000EA  BB 00000000			MOV EBX, 0									;set EBX to 0 to avoid calculation error
 000000EF  BF 00000000			MOV EDI, 0									;sets our initial point in bTemps to the first place
					
 000000F4				lpConvertandMove:	
 000000F4  8B 45 F8				MOV EAX, inASCII						;moves the address of the ascii values into eax so we can reference it
 000000F7  8A 18				MOV BL, byte ptr [EAX]					;moves into BL the byte at the address position
 000000F9  80 FB 00				CMP BL, 00								;compares this byte to 00 to test if we are at the end of the array
 000000FC  74 4B				JE Packnfinish							;if it is equal to 00, then jump to the finished label. 
						
 000000FE  B9 00000016				MOV ECX, lengthof WhiteListChars		;sets up our loop with the number of elements in the whitelisted characters array
 00000103  BE 00000000				MOV ESI, 0								;set initial offset in the whitelist to 0
						
 00000108					lpCompareWhitelist:
 00000108  3A 9E 00000000 R				CMP BL, WhiteListChars[ESI]			;compares bl to see if it is one of the whitelisted characters
 0000010E  74 08					JE ValidChar						;if it is a valid char, jump to the valid section
 00000110  46						INC ESI								;increment esi to the next position in the whitelisted characters array
 00000111  E2 F5				loop lpCompareWhitelist					;decrement ecx and loop back up
																;if it is not a valid char this executes
						
 00000113  FF 45 F8				INC inASCII								;increment inASCII so we get the next byte
 00000116  EB DC				JMP lpConvertandMove					;jump back up to the top to start the loop over again
						
 00000118					ValidChar:
 00000118  88 9F 00000016 R				MOV bTemps[EDI], BL					;Moves into btemps at position edi the byte in bl to hold that byte of the number that is building
 0000011E  FF 45 F8					INC inASCII							;increment to the next position of inASCII so we can see if the next char is valid
 00000121  8B 45 F8					MOV EAX, inASCII					;moves into eax the new address of the next byte 
 00000124  8A 18					MOV BL, byte ptr [EAX]				;moves the byte into Bl 
 00000126  FF 4D F8					DEC inASCII							;change it back to the previous character
							
 00000129  B9 00000016					MOV ECX, lengthof WhiteListChars	;adds the number of elements in whitelisted characters array into ecx for the loop
 0000012E  BE 00000000					MOV ESI, 0							;sets our initial position in the whitelisted characters array to 0
						
 00000133						lpCompareNext:
 00000133  3A 9E 00000000 R					CMP BL, WhiteListChars[ESI]		;This compares the next byte to see if it is whitelisted too
 00000139  74 08						JE ValidNextChar				;if it is a valid character, jump to the valid next char section
 0000013B  46							INC ESI							;increment esi if it is not valid to get to the next position in whitelisted characters
 0000013C  E2 F5					loop lpCompareNext					;decrement ECX and go to the top of the current loop
							
 0000013E  FF 45 F8					INC inASCII							;increments inASCII so we get the next byte in memory
 00000141  EB B1					JMP lpConvertandMove				;jump back up to the very top of the loop 
							
 00000143					ValidNextChar:
 00000143  47						INC EDI								;increment edi so we can input in the next position in bTemps
 00000144  FF 45 F8					INC inASCII							;increment inASCII so we get the next byte in memory
 00000147  EB AB					JMP lpConvertandMove				;jump back up to the very top of the loop
										
 00000149				Packnfinish:
 00000149  BE 00000000				MOV ESI, 0								;sets our initial position in the bvals array to 0	
 0000014E  66| 0F BE 45				MOVSX AX, numBytes						;moves the number of bytes into ax
	   F7
 00000153  B3 02				MOV BL, 2								;we need to divide by two so the loop doesnt execute more than it needs to
 00000155  F6 FB				iDIV BL									;divide by 2
 00000157  8A C8				MOV CL, AL								;move the resulting number into cl for looping
 00000159  B8 00000000				MOV EAX, 0								;clear out eax so we dont get any calculation errors
						
						.WHILE ECX != 0							;while cl is not equal to 0, execute the loop
 00000160  8A 9E 00000016 R				MOV BL, bTemps[ESI]					;move the current byte into bl
							.IF BL < 30h && BL < 41h || BL > 46h && BL < 61h || BL > 66h
																;the above statement checks to see if the current character is invalid
 0000017F  B8 FFFFFFFF						MOV EAX, -1						;move -1 into the output
 00000184  EB 60						JMP finished					;jump to return 
							.ENDIF								;endif
							
							.IF BL >= 65						;if the nibble grabbed is greater than or equal to 10
 0000018B  80 EB 37						SUB BL, 55						;we need to sub 55 to get the correct hex value
							.ELSE								;if it is not
 00000190  80 EB 30						SUB BL, 48						;we need to sub 48 to get the correct hex value
							.ENDIF								;endif
							
 00000193  66| C1 E3 08					SHL BX, 8							;shoft bx over to get it out of bl so we dont override it
 00000197  46						INC ESI								;increment esi if it is not valid to get to the next position in whitelisted characters
							
 00000198  8A 9E 00000016 R				MOV BL, bTemps[ESI]					;move the current byte into bl
							.IF BL < 30h && BL < 41h || BL > 46h && BL < 61h || BL > 66h
																;the above statement checks to see if the current character is invalid
 000001B7  B8 FFFFFFFF						MOV EAX, -1						;move -1 into the output
 000001BC  EB 28						JMP finished					;jump to return 
							.ENDIF
							
							.IF BL >= 65						;if the nibble grabbed is greater than or equal to 10
 000001C3  80 EB 37						SUB BL, 55						;we need to sub 55 to get the correct hex value
							.ELSE								;if it is not
 000001C8  80 EB 30						SUB BL, 48						;we need to sub 48 to get the correct hex value
							.ENDIF								;endif
							
 000001CB  C0 E3 04					SHL BL, 4							;shift bl over by 4 bytes so it lines up with the previously pushed nibble
 000001CE  66| C1 EB 04					SHR BX, 4							;shift bx back to get the value into bl
 000001D2  8A C3					MOV AL, BL							;move the result into al
							
							.IF ECX != 1						;if we are not in the last iteration of the loop
 000001D9  C1 E0 08						SHL EAX, 8						;shift eax left to make room for a new value
							.ENDIF								;endif

 000001DC  46						INC ESI								;increment esi if it is not valid to get to the next position in whitelisted characters
 000001DD  49						DEC ECX								;decrement ecx to eventually terminate the loop
						.ENDW									;go to the top of the current loop

 000001E6				finished:
						RET										;return back to where i was called 
 000001EF			charTo4HexDigits ENDP

				COMMENT%
				******************************************************************************
				*Name: encrypt32Bit                                                          *
				*Purpose:                                                                    *
				*	  Intakes a source string, a mask and the number of bytes, encryptes them*
				*		and returns a new address with the encripted values                  *
				*Date Created: 11/28/2019                                                    *
				*Date Modified: 11/30/2019                                                   *
				*                                                                            *
				*@param lpSourceString:dword                                                 *
				*@param dMask:dword                                                          *
				*@param numBytes:dword                                                       *
				*@returns encryptedAddr:dword                                                *
				*****************************************************************************%
 000001EF			encrypt32Bit PROC stdcall uses EBX ECX EDX ESI, lpSourceString:dword, dMask:dword , numBytes:dword
				LOCAL outAddr:dword, remainder:byte 		;set up stack frame and declare local variables

					INVOKE memoryallocBailey, numBytes		;allocate enough memory on the heap to store the output 
 00000201  89 45 FC			MOV outAddr, EAX						;stores the output address inside a local variable

 00000204  8B 45 10			MOV EAX, numBytes						;move the number of bytes into eax so we can calculate if string is apporopiate size
 00000207  BB 00000004			MOV EBX, 4								;move into ebx 4 so we can divide
 0000020C  33 D2			XOR EDX, EDX							;set EDX to 0
 0000020E  F7 F3			DIV EBX									;divide by 4 to get remainder 
 00000210  88 55 FB			MOV remainder, DL						;store the remainder
 00000213  0F BF C8			MOVSX ECX, AX							;move the number of times 4 goes into othe number of bytes into ecx

 00000216  8B 45 0C			MOV EAX, dMask							;move the mask passed in into eax
 00000219  33 F6			XOR ESI, ESI							;set ESi to 0
 0000021B  33 DB			XOR EBX, EBX							;set ebx to 0

					.WHILE ECX !=0							;while ecx is not 0
 0000021F  8B 55 08				MOV EDX, lpSourceString				;move the source string into edx
 00000222  8B 1C 16				MOV EBX, [EDX + ESI]				;move the 4 bytes in location edx + esi into ebx
 00000225  33 D8				XOR EBX, EAX						;xor the two registers together for encryption
 00000227  8B 55 FC				MOV EDX, outAddr					;moves the out address into edx
 0000022A  89 1C 16				MOV [EDX + ESI], EBX				;moves the encrypted 4 bytes into the output address location
						
 0000022D  83 C6 04				ADD ESI, 4							;add 4 to esi to get the next 4 bytes
 00000230  49					DEC ECX								;dec ecx so we can terminate the loop
					.ENDW

 00000235  0F BE 5D FB			MOVSX EBX, remainder					;move the remainder into ebx
					.IF remainder == 0						;if the remainder is 0, we are done
 0000023F  EB 2D				JMP Done							;jump to done
					.ELSEIF remainder == 1					;if the remainder is 1
 00000249  B1 18				MOV CL, 24							;move the number of bits we need to shift
					.ELSEIF remainder ==2 					;if the remainder is 2
 00000253  B1 10				MOV CL, 16							;move into cl the number of bits we need to shift
					.ELSE 									;if the remainder is 3
 00000257  B1 08				MOV CL, 8							;move into cl the number of bits we need to shift
					.ENDIF									;endif

 00000259  8B 45 0C			MOV EAX, dMask							;move the mask into eax for encryption of the remaining bits
 0000025C  D3 E8			SHR EAX, CL								;shift the mask cl number of bits to appropriately encrypt
 0000025E  33 DB			XOR EBX, EBX							;set ebx to 0
						
 00000260  8B 55 08			MOV EDX, lpSourceString					;move the source string into edx
 00000263  8B 1C 16			MOV EBX, [EDX + ESI]					;move the 4 bytes in location edx + esi into ebx
 00000266  33 D8			XOR EBX, EAX							;xor the two registers together for encryption
 00000268  8B 55 FC			MOV EDX, outAddr						;moves the out address into edx
 0000026B  89 1C 16			MOV [EDX + ESI], EBX					;moves the encrypted 4 bytes into the output address location

 0000026E				Done:
 0000026E  8B 45 FC				MOV EAX, outAddr					;move the encrypted output address into eax
						RET									;return to where i was called from
 00000279			encrypt32Bit ENDP
				;************************************* the instructions below calls for "normal termination"	

				END
Microsoft (R) Macro Assembler Version 6.11		    11/29/19 23:56:46
convertmethods.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

getBytes . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000004B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000279 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
charTo4HexDigits . . . . . . . .	P Near	 000000AD _TEXT	Length= 00000149 Public STDCALL
  lpSourceString . . . . . . . .	DWord	 bp + 00000008
  outVal . . . . . . . . . . . .	DWord	 bp - 00000004
  inASCII  . . . . . . . . . . .	DWord	 bp - 00000008
  numBytes . . . . . . . . . . .	Byte	 bp - 00000009
  ??0000 . . . . . . . . . . . .	L Near	 000000CA _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  lpConvertandMove . . . . . . .	L Near	 000000F4 _TEXT	
  lpCompareWhitelist . . . . . .	L Near	 00000108 _TEXT	
  ValidChar  . . . . . . . . . .	L Near	 00000118 _TEXT	
  lpCompareNext  . . . . . . . .	L Near	 00000133 _TEXT	
  ValidNextChar  . . . . . . . .	L Near	 00000143 _TEXT	
  Packnfinish  . . . . . . . . .	L Near	 00000149 _TEXT	
  finished . . . . . . . . . . .	L Near	 000001E6 _TEXT	
encrypt32Bit . . . . . . . . . .	P Near	 000001EF _TEXT	Length= 0000008A Public STDCALL
  lpSourceString . . . . . . . .	DWord	 bp + 00000008
  dMask  . . . . . . . . . . . .	DWord	 bp + 0000000C
  numBytes . . . . . . . . . . .	DWord	 bp + 00000010
  outAddr  . . . . . . . . . . .	DWord	 bp - 00000004
  remainder  . . . . . . . . . .	Byte	 bp - 00000005
  Done . . . . . . . . . . . . .	L Near	 0000026E _TEXT	
hexToCharacter . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AD Public STDCALL
  lpDestination  . . . . . . . .	DWord	 bp + 00000008
  lpSource . . . . . . . . . . .	DWord	 bp + 0000000C
  numBytes . . . . . . . . . . .	DWord	 bp + 00000010
  tempByte . . . . . . . . . . .	Byte	 bp - 00000001
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
WhiteListChars . . . . . . . . .	Byte	 00000000 _DATA	
bTemps . . . . . . . . . . . . .	Byte	 00000016 _DATA	
crlf . . . . . . . . . . . . . .	Byte	 00000048 _DATA	

	   0 Warnings
	   0 Errors
