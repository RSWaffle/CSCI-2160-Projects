Microsoft (R) Macro Assembler Version 6.11		    12/12/19 12:10:41
proj6a.asm						     Page 1 - 1


				;******************************************************************************************
				;*  Program Name: Proj6a.asm
				;*  Programmer:   Ryan Shupe
				;*  Class:        CSCI 2160-001
				;*  Lab:		  Project 6a
				;*  Date:         Created 12/07/2019
				;*  Purpose:      Calculates though a recursion problem outlined in the project specs
				;******************************************************************************************
					.486						;This tells assembler to generate 32-bit code
					.model flat					;This tells assembler that all addresses are real addresses
					.stack 100h					;EVERY program needs to have a stack allocated
				;******************************************************************************************
					ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD  						;Executes "normal" termination
				;******************************************************************************************
 00000000			.DATA
 00000000 00000000		dVal dword ?
				;******************************************************************************************
 00000000			.CODE

				COMMENT%
				******************************************************************************
				*Name: fun	                                                                 *
				*Purpose:                                                                    *
				*	  A recursive equation for fun(n-1) + 2(fun(n-2))+ 3(fun(n-3)), for n > 2*
				*		 						     		 								 *
				*Date Created: 11/26/2019                                                    *
				*Date Modified: 12/03/2019                                                   *
				*                                                                            *
				*                                                                            *
				*@param inVal:dword                                                          *
				*@returns result:dword                                                       *
				*****************************************************************************%
 00000000			fun PROC stdcall
 00000000  55				PUSH EBP 							;preserve the old stack frame
 00000001  8B EC			MOV EBP, ESP						;set a new stack frame
					
 00000003  53				PUSH EBX
 00000004  52				PUSH EDX

 = DWORD PTR [EBP + 8]			@n EQU DWORD PTR [EBP + 8]			;point @n to ebp + 8 so we don't have to reference it all the time

					.IF @n == 1							;if @n is equal to 1
 0000000B  B8 00000002				MOV EAX, 2						;move 2 into the output
 00000010  EB 66				JMP Done						;jump to done section
					.ELSEIF @n == 0						;if @n is equal to 0
 0000001A  B8 00000001				MOV EAX, 1						;move 1 into the output
 0000001F  EB 57				JMP Done						;jump to done
					.ELSEIF @n == 2						;if @n is equal to 2
 00000029  B8 00000007				MOV EAX, 7						;move 7 into the output	
 0000002E  EB 48				JMP Done						;jump to the done section
					.ENDIF								;end if

 00000030  8B 5D 08			MOV EBX, @n							;moves the value passed in into EBX so we can prepare it to pass 
 00000033  4B				DEC EBX								;decrement to get n-1
 00000034  53				PUSH EBX							;push n-1 onto the stack so we can push it through the function again
 00000035  E8 FFFFFFC6			CALL fun							;call our function again
 0000003A  83 C4 04			ADD ESP, 4							;eventually return back to this point and add back the number of bytes that we pushed onto the stack

 0000003D  A3 00000000 R		MOV dVal, EAX						;add to the temp variable dVal the number that was returned from the first function call

 00000042  8B 5D 08			MOV EBX, @n							;moves the value passed in into EBX so we can prepare it to pass 
 00000045  4B				DEC EBX								;decrement to get n-1
 00000046  4B				DEC EBX								;decrement to get n-2
 00000047  53				PUSH EBX							;push n-2 onto the stack so we can push it to the next call
 00000048  E8 FFFFFFB3			CALL fun							;call our function again
 0000004D  83 C4 04			ADD ESP, 4							;eventually return back to this point, add back the number of bytes that we used 
 00000050  03 C0			ADD EAX, EAX						;add EAX to EAX to simulate 2 * f(n-2)
 00000052  01 05 00000000 R		ADD dVal, EAX						;add to our temp dVal variable, the resulting value in EAX

 00000058  8B 5D 08			MOV EBX, @n							;moves the value passed in into EBX so we can prepare it to pass 
 0000005B  4B				DEC EBX								;decrement to get n-1
 0000005C  4B				DEC EBX								;decrement to get n-2
 0000005D  4B				DEC EBX								;decrement to get n-3
 0000005E  53				PUSH EBX							;push n-3 onto the stack so we can push it to the next call
 0000005F  E8 FFFFFF9C			CALL fun							;call our function again
 00000064  83 C4 04			ADD ESP, 4							;eventually return back to this point, add back the number of bytes that we used 
					
 00000067  8B D0			MOV EDX, EAX						;moves into EDX EAX so we can store it for a bit
 00000069  03 C0			ADD EAX, EAX						;Add the two EAX registers together to get 2 * f(n-3)
 0000006B  03 C2			ADD EAX, EDX						;add into EAX, EDX which will get us 3 * f(n-3)
 0000006D  01 05 00000000 R		ADD dVal, EAX						;add the resulting EAX value into dVal
 00000073  A1 00000000 R		MOV EAX, dVal						;move the final dVal value into EAX for output

 00000078			Done:
 00000078  5A				POP EDX
 00000079  5B				POP EBX
 0000007A  5D				POP EBP								;restore EBP
 0000007B  C3				RET									;return to where I was called. 
 0000007C			fun ENDP

				;************************************* the instructions below calls for "normal termination"
				END
Microsoft (R) Macro Assembler Version 6.11		    12/12/19 12:10:41
proj6a.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000004 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000007C DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fun  . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007C Public STDCALL
  Done . . . . . . . . . . . . .	L Near	 00000078 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@n . . . . . . . . . . . . . . .	Text   	 DWORD PTR [EBP + 8]
@stack . . . . . . . . . . . . .	Text   	 FLAT
dVal . . . . . . . . . . . . . .	DWord	 00000000 _DATA	

	   0 Warnings
	   0 Errors
